{"ast":null,"code":"import { VALIDGUESSES, WORDS } from \"../constants\";\nexport function checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch) {\n  if (historyRef.current.length == 6 || gameStatusRef.current) return;\n  console.log(e.keyCode);\n  console.log(e.key);\n\n  if (currentRowRef.current.length == 5) {\n    if (e.keyCode == 13) {\n      console.log(\"entered\");\n      var word = currentRowRef.current;\n      console.log(word);\n\n      if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n        setError(true);\n        setTimeout(() => {\n          setError(false);\n        }, 2000);\n        return;\n      }\n\n      var target = wordle;\n      var final = [];\n\n      for (var i in word) {\n        var status = \"gray\";\n\n        if (word[i] == target[i]) {\n          status = \"green\";\n          target = target.replace(word[i], \" \");\n        } else if (target.includes(word[i])) {\n          status = \"yellow\";\n          target = target.replace(word[i], \" \");\n        }\n\n        final.push({\n          key: word[i],\n          status: status\n        });\n      }\n\n      setHistory([...historyRef.current, final]);\n      setCurrentRow([]); //    dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\n\n      client.send(JSON.stringify({\n        type: \"update\",\n        payload: {\n          rows: historyRef.current,\n          clientID: clientID,\n          gameID: gameID\n        }\n      })); //    setCurrentRow([])\n\n      if (final.every(value => value.status == \"green\")) {\n        const data = {\n          type: \"winner\",\n          payload: {\n            winner: user,\n            gameID: gameID\n          }\n        };\n        client.send(JSON.stringify(data));\n        setWinner(true);\n        setRematch(true);\n      }\n    } else if (e.keyCode == 8) {\n      const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1);\n      setCurrentRow(tmp);\n    }\n  } else if (e.keyCode == 8) {\n    const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1);\n    setCurrentRow(tmp);\n  } else if (currentRowRef.current.length < 5) {\n    if (e.keyCode >= 65 && e.keyCode <= 90) {\n      setCurrentRow([...currentRowRef.current, e.key]);\n    }\n  }\n}\nexport function middlewareKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch) {\n  checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch);\n}","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/functions/handler.js"],"names":["VALIDGUESSES","WORDS","checkKey","e","historyRef","gameStatusRef","currentRowRef","setHistory","setCurrentRow","setWinner","setRematch","current","length","console","log","keyCode","key","word","includes","join","setError","setTimeout","target","wordle","final","i","status","replace","push","client","send","JSON","stringify","type","payload","rows","clientID","gameID","every","value","data","winner","user","tmp","slice","middlewareKey"],"mappings":"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","sourcesContent":["import { VALIDGUESSES, WORDS } from \"../constants\";\r\n\r\nexport function checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch) {\r\n    if (historyRef.current.length == 6 || gameStatusRef.current ) return;\r\n    console.log(e.keyCode);\r\n    console.log(e.key);\r\n    \r\n    if (currentRowRef.current.length == 5) {\r\n        \r\n        if (e.keyCode == 13) {\r\n            console.log(\"entered\");\r\n            var word = currentRowRef.current\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({key: word[i], status: status});\r\n          \r\n       }\r\n       setHistory([...historyRef.current, final])\r\n       setCurrentRow([])\r\n     \r\n    //    dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\r\n       client.send(JSON.stringify({type: \"update\", payload: {rows: historyRef.current, clientID: clientID, gameID: gameID}}));\r\n    //    setCurrentRow([])\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        const data = {\r\n            type: \"winner\",\r\n            payload: {\r\n                winner: user,\r\n                gameID: gameID\r\n                }\r\n        }\r\n        client.send(JSON.stringify(data));\r\n        setWinner(true);\r\n        setRematch(true);\r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1)\r\n            setCurrentRow(tmp)\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1)\r\n        setCurrentRow(tmp)\r\n    } else if (currentRowRef.current.length < 5) {\r\n        if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n            setCurrentRow([...currentRowRef.current, e.key])\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function middlewareKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch) {\r\n    checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch)\r\n}"]},"metadata":{},"sourceType":"module"}