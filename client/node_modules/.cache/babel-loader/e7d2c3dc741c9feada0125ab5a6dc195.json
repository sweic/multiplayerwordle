{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef, useReducer, useCallback } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport Opponent from \"./Opponent\";\nimport Keyboard from \"./Keyboard\";\nimport { keyrow1, keyrow2, keyrow3 } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst actionTypes = {\n  TYPE_LETTER: \"TYPE_LETTER\",\n  TYPE_BACKSPACE: \"TYPE_BACKSPACE\",\n  ACCEPT_RESPONSE: \"ACCEPT_RESPONSE\",\n  ACCEPT_ERROR: \"ACCEPT_ERROR\"\n};\nconst initialState = {\n  currentRow: [],\n  history: []\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.TYPE_LETTER:\n      return { ...state,\n        currentRow: [...state.currentRow, action.payload]\n      };\n\n    case actionTypes.TYPE_BACKSPACE:\n      return { ...state,\n        currentRow: state.currentRow.slice(0, state.currentRow.length - 1)\n      };\n\n    case actionTypes.ACCEPT_RESPONSE:\n      return {\n        history: [...state.history, action.payload],\n        currentRow: []\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID,\n    opponentData\n  } = _ref;\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3]);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    currentRow,\n    history\n  } = state;\n  const currentRowRef = useRef();\n  const historyRef = useRef();\n\n  const fetchRef = () => {\n    currentRowRef.current = state.currentRow;\n    historyRef.current = state.history;\n  };\n\n  useEffect(() => {\n    const initKeys = [keyrow1, keyrow2, keyrow3];\n    setKeyboard(initKeys);\n    console.log(initKeys);\n  }, []);\n  useEffect(() => {\n    var initKeys = [keyrow1, keyrow2, keyrow3];\n\n    for (var a in history) {\n      for (var c in history[a]) {\n        var flag = false;\n        if (flag) break;else {\n          for (const j in initKeys) {\n            for (var b in initKeys[j]) {\n              if (history[a][c].key == initKeys[j][b].key) {\n                initKeys[j][b].status = history[a][c].status;\n                flag = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setKeyboard(initKeys);\n  }, [history]);\n  const testRef = useRef(null);\n  console.log(clientID);\n  var prevRow = [];\n  var prevHistory = [];\n  prevHistory = [];\n  const checkTestStupidity = useCallback(() => {\n    fetchRef();\n    console.log(currentRowRef.current);\n    console.log(historyRef.current);\n  }, [currentRow]);\n\n  function checkKey(e) {\n    console.log(prevRow);\n    if (state.history.length == 6 || gameEnd.status) return;\n    console.log(e.keyCode);\n    checkTestStupidity();\n    console.log(state.currentRow.length);\n\n    if (state.currentRow.length == 5) {\n      if (e.keyCode == 13) {\n        console.log(\"entered\");\n        var word = state.currentRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            key: word[i],\n            status: status\n          });\n        } //    setHistory([...prevHistory, final])\n        //    prevHistory.push(final)\n\n\n        dispatch({\n          type: actionTypes.ACCEPT_RESPONSE,\n          payload: final\n        });\n        client.send(JSON.stringify({\n          type: \"update\",\n          payload: {\n            rows: state.history,\n            clientID: clientID,\n            gameID: gameID\n          }\n        })); //    setCurrentRow([])\n\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true); // prevHistory = [];\n          // prevRow = [];\n        }\n      } else if (e.keyCode == 8) {\n        // const tmp = prevRow.slice(0, prevRow.length - 1)\n        // setCurrentRow(tmp)\n        // prevRow = tmp;\n        dispatch({\n          type: actionTypes.TYPE_BACKSPACE\n        });\n      }\n    } else if (e.keyCode == 8) {\n      // const tmp = prevRow.slice(0, prevRow.length - 1)\n      // setCurrentRow(tmp)\n      // prevRow = tmp;\n      dispatch({\n        type: actionTypes.TYPE_BACKSPACE\n      });\n    } else if (state.currentRow.length < 5) {\n      if (e.keyCode >= 65 && e.keyCode <= 90) {\n        // setCurrentRow([...prevRow, e.key])\n        // prevRow.push(e.key)\n        dispatch({\n          type: actionTypes.TYPE_LETTER,\n          payload: e.key\n        });\n      }\n    }\n  }\n\n  const handleKeyChange = d => {// console.log(prevRow);\n    // prevRow = currentRow;\n    // prevHistory = history;\n    // d.preventDefault();\n    // const key = d.target.getAttribute(\"data\")\n    // const e = d.target.getAttribute(\"data\").charCodeAt(0);\n    // console.log(e);\n    // if (prevHistory.length == 6 || gameEnd.status) return;\n    // if (prevRow.length == 5) {\n    //     if (e == 69) {\n    //         var word = prevRow\n    //         console.log(word);\n    //         if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n    //             setError(true);\n    //             setTimeout(() => {\n    //                 setError(false)\n    //             }, 2000)\n    //             return \n    //         }\n    //    var target = wordle;\n    //    var final = []\n    //    for (var i in word) {\n    //        var status = \"gray\"\n    //        if (word[i] == target[i]) {\n    //            status = \"green\"\n    //            target = target.replace(word[i], \" \")\n    //        } else if (target.includes(word[i])) {\n    //            status = \"yellow\"\n    //            target = target.replace(word[i], \" \")\n    //        } \n    //        final.push({key: word[i], status: status});\n    //    }\n    //    setHistory([...prevHistory, final])\n    //    prevHistory.push(final)\n    //    client.send(JSON.stringify({type: \"update\", payload: {rows: prevHistory, clientID: clientID, gameID: gameID}}));\n    //    setCurrentRow([])\n    //    prevRow = []\n    //    if (final.every((value) => value.status == \"green\")) {\n    //     const data = {\n    //         type: \"winner\",\n    //         payload: {\n    //             winner: user,\n    //             gameID: gameID\n    //             }\n    //     }\n    //     client.send(JSON.stringify(data));\n    //     setWinner(true);\n    //     prevHistory = [];\n    //     prevRow = [];\n    //  }\n    //     } \n    //     else if (e == 68) {\n    //         const tmp = prevRow.slice(0, prevRow.length - 1)\n    //         setCurrentRow(tmp)\n    //         prevRow = tmp;\n    //     }\n    // } else if (e == 68) {\n    //     const tmp = prevRow.slice(0, prevRow.length - 1)\n    //     setCurrentRow(tmp)\n    //     prevRow = tmp;\n    // } else if (e >= 97 && e <= 122) {\n    //     setCurrentRow([...prevRow, key])\n    //     prevRow.push(key)\n    // }\n  };\n\n  useEffect(() => {\n    console.log(\"did this\");\n    window.addEventListener('keyup', checkKey);\n    testRef.current.focus();\n    setTimeout(() => {\n      setTimer(timer + 1);\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (gameEnd.status) {\n      window.addEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n\n      if (gameEnd.winner == user) {\n        setWinner(true);\n        window.removeEventListener('keyup', checkKey);\n      } else {\n        setWinner(false);\n        window.removeEventListener('keyup', checkKey);\n      }\n    }\n\n    return () => {\n      window.removeEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n    };\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toasty\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: error ? \"toast-container error\" : \"toast-container\",\n        children: \"Not in word list!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner ? \"toast-container error\" : \"toast-container\",\n        children: \"You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner == false ? \"toast-container error\" : \"toast-container\",\n        children: \"You lost!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Opponent, {\n      opponentData: opponentData,\n      opponent: players.find(player => player !== user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 7\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n        history: state.history,\n        opponent: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 32\n      }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentrow-containers\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n          currentRow: state.currentRow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n          opponent: \"false\",\n          blankRows: 6 - state.history.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"fallback-input\",\n        ref: testRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow one\",\n        children: keyboard[0].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow two\",\n        children: keyboard[1].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow three\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keytile none special\",\n          value: \"ENTER\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: \"ENTER\",\n            className: `keyboardtile`,\n            children: \"ENTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 7\n        }, this), keyboard[2].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 19\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"DELETE\",\n          className: \"keytile none special\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: \"DELETE\",\n            className: `keyboardtile`,\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"ovIYBCkG7a4UeFe5kAHhGaT9LPw=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","useReducer","useCallback","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Opponent","Keyboard","keyrow1","keyrow2","keyrow3","actionTypes","TYPE_LETTER","TYPE_BACKSPACE","ACCEPT_RESPONSE","ACCEPT_ERROR","initialState","currentRow","history","reducer","state","action","type","payload","slice","length","Error","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","opponentData","error","setError","winner","setWinner","timer","setTimer","keyboard","setKeyboard","dispatch","currentRowRef","historyRef","fetchRef","current","initKeys","console","log","a","c","flag","j","b","key","status","testRef","prevRow","prevHistory","checkTestStupidity","checkKey","e","keyCode","word","includes","join","setTimeout","target","final","i","replace","push","send","JSON","stringify","rows","every","value","data","handleKeyChange","d","window","addEventListener","focus","event","stopImmediatePropagation","removeEventListener","find","player","map","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef, useReducer, useCallback} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nimport Opponent from \"./Opponent\";\r\nimport Keyboard from \"./Keyboard\";\r\nimport {keyrow1, keyrow2, keyrow3} from '../constants.js';\r\nconst actionTypes = {\r\n    TYPE_LETTER: \"TYPE_LETTER\",\r\n    TYPE_BACKSPACE: \"TYPE_BACKSPACE\",\r\n    ACCEPT_RESPONSE: \"ACCEPT_RESPONSE\",\r\n    ACCEPT_ERROR: \"ACCEPT_ERROR\",\r\n  };\r\n\r\n  const initialState = {\r\n    currentRow: [],\r\n    history: [],\r\n  };\r\n\r\nfunction reducer(state, action) {\r\n    switch(action.type) {\r\n        case actionTypes.TYPE_LETTER:\r\n            return {\r\n                ...state,\r\n                currentRow: [...state.currentRow, action.payload]\r\n            }\r\n        case actionTypes.TYPE_BACKSPACE:\r\n            return {\r\n                ...state,\r\n                currentRow: state.currentRow.slice(0, state.currentRow.length - 1)\r\n            }\r\n        case actionTypes.ACCEPT_RESPONSE: \r\n            return {\r\n                history: [...state.history, action.payload],\r\n                currentRow: [],\r\n            }\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID, opponentData}) {\r\n   \r\n   \r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [timer, setTimer] = useState(0)\r\n   const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3])\r\n   const [state, dispatch] = useReducer(reducer, initialState);\r\n   const {currentRow, history} = state\r\n   const currentRowRef = useRef()\r\n   const historyRef = useRef()\r\n\r\n   const fetchRef = () => {\r\n       currentRowRef.current = state.currentRow\r\n       historyRef.current = state.history\r\n   }\r\n\r\n\r\n   useEffect(() => {\r\n       const initKeys = [keyrow1, keyrow2, keyrow3];\r\n       setKeyboard(initKeys);\r\n       console.log(initKeys);\r\n    \r\n   }, [])\r\n\r\n   useEffect(() => {\r\n    var initKeys = [keyrow1, keyrow2, keyrow3];\r\n    for (var a in history) {\r\n        for (var c in history[a]) {\r\n            var flag = false\r\n            if (flag) break;\r\n            else {\r\n                for (const j in initKeys) {\r\n                    for (var b in initKeys[j]) {\r\n                        if (history[a][c].key == initKeys[j][b].key) {\r\n                            initKeys[j][b].status = history[a][c].status\r\n                            flag = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n    setKeyboard(initKeys)\r\n}, [history])\r\n   \r\n   const testRef = useRef(null)\r\n\r\n   console.log(clientID);\r\n   var prevRow = []\r\n   var prevHistory = []\r\n   prevHistory = [];\r\n\r\n   \r\n    const checkTestStupidity = useCallback(() => {\r\n        fetchRef();\r\n        console.log(currentRowRef.current);\r\n        console.log(historyRef.current);\r\n    }, [currentRow])\r\n   function checkKey(e) {\r\n    console.log(prevRow);\r\n    if (state.history.length == 6 || gameEnd.status ) return;\r\n    console.log(e.keyCode);\r\n    checkTestStupidity()\r\n    console.log(state.currentRow.length);\r\n    if (state.currentRow.length == 5) {\r\n        \r\n        if (e.keyCode == 13) {\r\n            console.log(\"entered\");\r\n            var word = state.currentRow\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({key: word[i], status: status});\r\n          \r\n       }\r\n    //    setHistory([...prevHistory, final])\r\n    //    prevHistory.push(final)\r\n       dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\r\n       client.send(JSON.stringify({type: \"update\", payload: {rows: state.history, clientID: clientID, gameID: gameID}}));\r\n    //    setCurrentRow([])\r\n       prevRow = []\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        const data = {\r\n            type: \"winner\",\r\n            payload: {\r\n                winner: user,\r\n                gameID: gameID\r\n                }\r\n        }\r\n        client.send(JSON.stringify(data));\r\n        setWinner(true);\r\n        // prevHistory = [];\r\n        // prevRow = [];\r\n       \r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            // const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            // setCurrentRow(tmp)\r\n            // prevRow = tmp;\r\n            dispatch({type: actionTypes.TYPE_BACKSPACE})\r\n\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        // const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        // setCurrentRow(tmp)\r\n        // prevRow = tmp;\r\n        dispatch({type: actionTypes.TYPE_BACKSPACE})\r\n     \r\n            \r\n    } else if (state.currentRow.length < 5) {\r\n        if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n            // setCurrentRow([...prevRow, e.key])\r\n            // prevRow.push(e.key)\r\n            dispatch({type: actionTypes.TYPE_LETTER, payload: e.key});\r\n           \r\n        }\r\n\r\n    }\r\n}\r\n\r\n    const handleKeyChange = (d) => {\r\n        // console.log(prevRow);\r\n        // prevRow = currentRow;\r\n        // prevHistory = history;\r\n        // d.preventDefault();\r\n        // const key = d.target.getAttribute(\"data\")\r\n        // const e = d.target.getAttribute(\"data\").charCodeAt(0);\r\n        // console.log(e);\r\n        // if (prevHistory.length == 6 || gameEnd.status) return;\r\n\r\n        // if (prevRow.length == 5) {\r\n        //     if (e == 69) {\r\n                \r\n        //         var word = prevRow\r\n    \r\n        //         console.log(word);\r\n        //         if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n        //             setError(true);\r\n        //             setTimeout(() => {\r\n        //                 setError(false)\r\n        //             }, 2000)\r\n        //             return \r\n        //         }\r\n        //    var target = wordle;\r\n        //    var final = []\r\n        //    for (var i in word) {\r\n        //        var status = \"gray\"\r\n        //        if (word[i] == target[i]) {\r\n        //            status = \"green\"\r\n        //            target = target.replace(word[i], \" \")\r\n        //        } else if (target.includes(word[i])) {\r\n        //            status = \"yellow\"\r\n        //            target = target.replace(word[i], \" \")\r\n        //        } \r\n        //        final.push({key: word[i], status: status});\r\n              \r\n        //    }\r\n        //    setHistory([...prevHistory, final])\r\n        //    prevHistory.push(final)\r\n        //    client.send(JSON.stringify({type: \"update\", payload: {rows: prevHistory, clientID: clientID, gameID: gameID}}));\r\n        //    setCurrentRow([])\r\n        //    prevRow = []\r\n        //    if (final.every((value) => value.status == \"green\")) {\r\n        //     const data = {\r\n        //         type: \"winner\",\r\n        //         payload: {\r\n        //             winner: user,\r\n        //             gameID: gameID\r\n        //             }\r\n        //     }\r\n        //     client.send(JSON.stringify(data));\r\n        //     setWinner(true);\r\n        //     prevHistory = [];\r\n        //     prevRow = [];\r\n           \r\n        //  }\r\n        //     } \r\n        //     else if (e == 68) {\r\n        //         const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        //         setCurrentRow(tmp)\r\n        //         prevRow = tmp;\r\n    \r\n        //     }\r\n        // } else if (e == 68) {\r\n        //     const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        //     setCurrentRow(tmp)\r\n        //     prevRow = tmp;\r\n         \r\n                \r\n        // } else if (e >= 97 && e <= 122) {\r\n        //     setCurrentRow([...prevRow, key])\r\n        //     prevRow.push(key)\r\n           \r\n        // }\r\n\r\n\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"did this\");\r\n        window.addEventListener('keyup', checkKey);\r\n        testRef.current.focus()\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n        \r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        if (gameEnd.status) {\r\n            window.addEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n                window.removeEventListener('keyup', checkKey);\r\n                \r\n            } else {\r\n                setWinner(false);\r\n                window.removeEventListener('keyup', checkKey);\r\n            }\r\n        }\r\n        return () => {\r\n            window.removeEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n        }\r\n\r\n    }, [reload])\r\n\r\n    \r\n\r\n\r\n  return (<div className=\"board-container\">\r\n       <div className=\"toasty\">\r\n      <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n      <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n      <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>\r\n      </div>\r\n      <Opponent opponentData={opponentData} opponent={players.find((player) => player !== user)}></Opponent>\r\n     \r\n     \r\n        <div className=\"user-container\">\r\n      <p>{user}</p>\r\n        {history.length > 0 && <HistoryRow history={state.history} opponent={\"false\"}></HistoryRow>}\r\n       {history.length < 6 && <div className=\"currentrow-containers\"> <CurrentRow currentRow={state.currentRow}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - state.history.length - 1}></BlankRows></div>}\r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n      </div> \r\n      <div className=\"keyboard\">\r\n      <div className=\"keyrow one\">\r\n          {keyboard[0].map((key) => {\r\n              return (\r\n                  <div  value={key.key} className={`keytile ${key.status}`}>\r\n                      <button onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                  </div>\r\n              )\r\n          })}\r\n      </div>\r\n      <div className=\"keyrow two\">\r\n          {keyboard[1].map((key) => {\r\n              return (\r\n                  <div  value={key.key} className={`keytile ${key.status}`}>\r\n                      <button onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                  </div>\r\n              )\r\n          })}\r\n      </div>\r\n      <div className=\"keyrow three\">\r\n      <div className=\"keytile none special\"  value={\"ENTER\"}>\r\n                      <button onClick={(e) => handleKeyChange(e)} data={\"ENTER\"} className={`keyboardtile`}>ENTER</button>\r\n                  </div>\r\n          {keyboard[2].map((key) => {\r\n              \r\n              return (\r\n                  <div value={key.key}  className={`keytile ${key.status}`}>\r\n                      <button  onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                  </div>\r\n              )\r\n          })}\r\n          <div value={\"DELETE\"} className=\"keytile none special\">\r\n                      <button onClick={(e) => handleKeyChange(e)} data={\"DELETE\"} className={`keyboardtile`}>DELETE</button>\r\n                  </div>\r\n      </div>\r\n  </div>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}