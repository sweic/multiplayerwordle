{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef, useReducer, useCallback } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport Opponent from \"./Opponent\";\nimport { keyrow1, keyrow2, keyrow3 } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID,\n    opponentData,\n    keysa\n  } = _ref;\n  console.log(\"remounted\");\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [currentRow, _setCurrentRow] = useState([]);\n  const [history, _setHistory] = useState([]);\n  const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3]);\n  const [rematch, setRematch] = useState(false);\n  const [gameStatus, _setGameStatus] = useState(false);\n  const gameStatusRef = useRef(false);\n  const currentRowRef = useRef(currentRow);\n  const historyRef = useRef(history);\n  const testRef = useRef(null);\n\n  const setHistory = x => {\n    historyRef.current = x;\n\n    _setHistory(x);\n  };\n\n  const setCurrentRow = x => {\n    currentRowRef.current = x;\n\n    _setCurrentRow(x);\n  };\n\n  const setGameStatus = x => {\n    gameStatusRef.current = x;\n\n    _setGameStatus(x);\n  };\n\n  useEffect(() => {\n    if (gameEnd.status) {\n      setGameStatus(true);\n    } else {\n      setGameStatus(false);\n    }\n  }, [gameEnd]);\n  useEffect(() => {\n    var newKeys = [keyrow1, keyrow2, keyrow3];\n\n    for (var j in newKeys) {\n      for (var k in newKeys[j]) {\n        newKeys[j][k].status = \"none\";\n      }\n    }\n\n    if (!gameStatusRef.current) {\n      console.log(\"reverted\");\n      console.log(\"performing this right now bro\");\n      setTimeout(() => {\n        setKeyboard([...newKeys, [Math.random()]]);\n        console.log(\"final init\");\n      }, 100);\n    } // }, true);\n\n\n    console.log(\"did this\");\n    setHistory([]);\n    setCurrentRow([]);\n    setWinner(null);\n    window.addEventListener('keyup', middlewareKey);\n    testRef.current.focus();\n    return () => {\n      window.removeEventListener('keyup', middlewareKey);\n    };\n  }, [wordle]);\n  useEffect(() => {\n    console.log(\"init keyboard\");\n    console.log(history);\n\n    if (history.length > 0) {\n      console.log(\"changing keys\");\n      var initKeysOne = [keyrow1, keyrow2, keyrow3];\n\n      for (var a in history) {\n        for (var c in history[a]) {\n          console.log(history[a][c]);\n          var flag = false;\n          if (flag) break;else {\n            for (const j in initKeysOne) {\n              for (var b in initKeysOne[j]) {\n                if (history[a][c].key == initKeysOne[j][b].key) {\n                  initKeysOne[j][b].status = history[a][c].status;\n                  flag = true;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      setKeyboard(initKeysOne);\n    }\n  }, [history]);\n  console.log(clientID);\n\n  const handleRematch = e => {\n    e.preventDefault();\n    const data = {\n      type: \"rematch\",\n      payload: {\n        gameID: gameID,\n        clientID: clientID\n      }\n    };\n    client.send(JSON.stringify(data));\n    setRematch(false);\n  }; //    function middlewareKey(e) {\n  //        checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch)\n  //    }\n  //    function checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch) {\n  //     if (historyRef.current.length == 6 || gameStatusRef.current ) return;\n  //     console.log(e.keyCode);\n  //     console.log(e.key);\n  //     if (currentRowRef.current.length == 5) {\n  //         if (e.keyCode == 13) {\n  //             console.log(\"entered\");\n  //             var word = currentRowRef.current\n  //             console.log(word);\n  //             if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n  //                 setError(true);\n  //                 setTimeout(() => {\n  //                     setError(false)\n  //                 }, 2000)\n  //                 return \n  //             }\n  //        var target = wordle;\n  //        var final = []\n  //        for (var i in word) {\n  //            var status = \"gray\"\n  //            if (word[i] == target[i]) {\n  //                status = \"green\"\n  //                target = target.replace(word[i], \" \")\n  //            } else if (target.includes(word[i])) {\n  //                status = \"yellow\"\n  //                target = target.replace(word[i], \" \")\n  //            } \n  //            final.push({key: word[i], status: status});\n  //        }\n  //        setHistory([...historyRef.current, final])\n  //        setCurrentRow([])\n  //     //    dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\n  //        client.send(JSON.stringify({type: \"update\", payload: {rows: historyRef.current, clientID: clientID, gameID: gameID}}));\n  //     //    setCurrentRow([])\n  //        if (final.every((value) => value.status == \"green\")) {\n  //         const data = {\n  //             type: \"winner\",\n  //             payload: {\n  //                 winner: user,\n  //                 gameID: gameID\n  //                 }\n  //         }\n  //         client.send(JSON.stringify(data));\n  //         setWinner(true);\n  //         setRematch(true);\n  //      }\n  //         } \n  //         else if (e.keyCode == 8) {\n  //             const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1)\n  //             setCurrentRow(tmp)\n  //         }\n  //     } else if (e.keyCode == 8) {\n  //         const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1)\n  //         setCurrentRow(tmp)\n  //     } else if (currentRowRef.current.length < 5) {\n  //         if (e.keyCode >= 65 && e.keyCode <= 90) {\n  //             setCurrentRow([...currentRowRef.current, e.key])\n  //         }\n  //     }\n  // }\n\n\n  const handleKeyChange = d => {\n    d.preventDefault();\n    if (historyRef.current.length == 6 || gameStatusRef.current) return;\n    const key = d.target.getAttribute(\"data\");\n    const keyCode = d.target.getAttribute(\"code\");\n    middlewareKey({\n      key: key,\n      keyCode: keyCode\n    }, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch);\n  };\n\n  useEffect(() => {\n    if (gameStatusRef.current) {\n      if (gameEnd.winner == user) {\n        setWinner(true);\n      } else {\n        setWinner(false);\n      }\n\n      setRematch(true);\n    }\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(Opponent, {\n      opponentData: opponentData,\n      opponent: players.find(player => player !== user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toasty\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: error ? \"toast-container error\" : \"toast-container\",\n          children: \"Not in word list!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner ? \"toast-container error\" : \"toast-container\",\n          children: \"You won!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner == false ? \"toast-container error\" : \"toast-container\",\n          children: \"You lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => handleRematch(e),\n          className: rematch ? \"toast-container rematch\" : \"toast-container\",\n          children: \"Rematch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n        history: historyRef.current,\n        opponent: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 32\n      }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentrow-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n          currentRow: currentRowRef.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n          opponent: \"false\",\n          blankRows: 6 - historyRef.current.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"fallback-input\",\n        ref: testRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow one\",\n        children: keyboard[0].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              code: key.key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow two\",\n        children: keyboard[1].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              code: key.key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow three\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keytile none special\",\n          value: \"ENTER\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: 13,\n            code: 13,\n            className: `keyboardtile`,\n            children: \"ENTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), keyboard[2].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              code: key.key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 21\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"DELETE\",\n          className: \"keytile none special\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: 8,\n            code: 8,\n            className: `keyboardtile`,\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"32u3bBasRa02HxsO6YqVxywsbGM=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","useReducer","useCallback","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Opponent","keyrow1","keyrow2","keyrow3","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","opponentData","keysa","console","log","error","setError","winner","setWinner","currentRow","_setCurrentRow","history","_setHistory","keyboard","setKeyboard","rematch","setRematch","gameStatus","_setGameStatus","gameStatusRef","currentRowRef","historyRef","testRef","setHistory","x","current","setCurrentRow","setGameStatus","status","newKeys","j","k","setTimeout","Math","random","window","addEventListener","middlewareKey","focus","removeEventListener","length","initKeysOne","a","c","flag","b","key","handleRematch","e","preventDefault","data","type","payload","send","JSON","stringify","handleKeyChange","d","target","getAttribute","keyCode","find","player","map","toUpperCase","charCodeAt"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,EAAqCC,UAArC,EAAiDC,WAAjD,QAAmE,OAAnE;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,YAAR,EAAsBC,KAAtB,QAAkC,iBAAlC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,OAAR,EAAiBC,OAAjB,EAA0BC,OAA1B,QAAwC,iBAAxC;;;AAEA,SAASC,KAAT,OAAwG;AAAA;;AAAA,MAAzF;AAACC,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,IAAlC;AAAwCC,IAAAA,OAAxC;AAAiDC,IAAAA,MAAjD;AAAyDC,IAAAA,QAAzD;AAAmEC,IAAAA,YAAnE;AAAiFC,IAAAA;AAAjF,GAAyF;AACrGC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC4B,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC8B,UAAD,EAAaC,cAAb,IAA+B/B,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACgC,OAAD,EAAUC,WAAV,IAAyBjC,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACkC,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAAC,CAACU,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAD,CAAxC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBrC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACsC,UAAD,EAAaC,cAAb,IAA+BvC,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAMwC,aAAa,GAAGtC,MAAM,CAAC,KAAD,CAA5B;AACA,QAAMuC,aAAa,GAAGvC,MAAM,CAAC4B,UAAD,CAA5B;AACA,QAAMY,UAAU,GAAGxC,MAAM,CAAC8B,OAAD,CAAzB;AACA,QAAMW,OAAO,GAAGzC,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAM0C,UAAU,GAAGC,CAAC,IAAI;AACpBH,IAAAA,UAAU,CAACI,OAAX,GAAqBD,CAArB;;AACAZ,IAAAA,WAAW,CAACY,CAAD,CAAX;AACH,GAHD;;AAIA,QAAME,aAAa,GAAGF,CAAC,IAAI;AACvBJ,IAAAA,aAAa,CAACK,OAAd,GAAwBD,CAAxB;;AACAd,IAAAA,cAAc,CAACc,CAAD,CAAd;AACH,GAHD;;AAKA,QAAMG,aAAa,GAAGH,CAAC,IAAI;AACtBL,IAAAA,aAAa,CAACM,OAAd,GAAwBD,CAAxB;;AACAN,IAAAA,cAAc,CAACM,CAAD,CAAd;AACJ,GAHD;;AAMH5C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,OAAO,CAAC8B,MAAZ,EAAoB;AAChBD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAFD,MAEO;AACHA,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GANQ,EAMN,CAAC7B,OAAD,CANM,CAAT;AASAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiD,OAAO,GAAG,CAACxC,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAd;;AACI,SAAK,IAAIuC,CAAT,IAAcD,OAAd,EAAuB;AACnB,WAAK,IAAIE,CAAT,IAAcF,OAAO,CAACC,CAAD,CAArB,EAA0B;AACtBD,QAAAA,OAAO,CAACC,CAAD,CAAP,CAAWC,CAAX,EAAcH,MAAd,GAAuB,MAAvB;AACH;AACJ;;AACD,QAAI,CAACT,aAAa,CAACM,OAAnB,EAA4B;AACxBtB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AAEA4B,MAAAA,UAAU,CAAC,MAAM;AACblB,QAAAA,WAAW,CAAC,CAAC,GAAGe,OAAJ,EAAa,CAACI,IAAI,CAACC,MAAL,EAAD,CAAb,CAAD,CAAX;AACA/B,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,OAHS,EAGP,GAHO,CAAV;AAIH,KAfO,CAkBZ;;;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAmB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAG,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAlB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA2B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCC,aAAjC;AACAf,IAAAA,OAAO,CAACG,OAAR,CAAgBa,KAAhB;AACA,WAAO,MAAM;AACTH,MAAAA,MAAM,CAACI,mBAAP,CAA2B,OAA3B,EAAoCF,aAApC;AACH,KAFD;AAGH,GA5BQ,EA4BN,CAAC3C,MAAD,CA5BM,CAAT;AA8BGd,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ;;AACH,QAAIA,OAAO,CAAC6B,MAAR,GAAiB,CAArB,EAAwB;AACpBrC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAIqC,WAAW,GAAG,CAACpD,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAlB;;AACJ,WAAK,IAAImD,CAAT,IAAc/B,OAAd,EAAuB;AAEnB,aAAK,IAAIgC,CAAT,IAAchC,OAAO,CAAC+B,CAAD,CAArB,EAA0B;AACtBvC,UAAAA,OAAO,CAACC,GAAR,CAAYO,OAAO,CAAC+B,CAAD,CAAP,CAAWC,CAAX,CAAZ;AACA,cAAIC,IAAI,GAAG,KAAX;AACA,cAAIA,IAAJ,EAAU,MAAV,KACK;AACD,iBAAK,MAAMd,CAAX,IAAgBW,WAAhB,EAA6B;AACzB,mBAAK,IAAII,CAAT,IAAcJ,WAAW,CAACX,CAAD,CAAzB,EAA8B;AAC1B,oBAAInB,OAAO,CAAC+B,CAAD,CAAP,CAAWC,CAAX,EAAcG,GAAd,IAAqBL,WAAW,CAACX,CAAD,CAAX,CAAee,CAAf,EAAkBC,GAA3C,EAAgD;AAC5CL,kBAAAA,WAAW,CAACX,CAAD,CAAX,CAAee,CAAf,EAAkBjB,MAAlB,GAA2BjB,OAAO,CAAC+B,CAAD,CAAP,CAAWC,CAAX,EAAcf,MAAzC;AACAgB,kBAAAA,IAAI,GAAG,IAAP;AACA;AACH;AACJ;AACJ;AAEJ;AAEJ;AAGJ;;AACD9B,MAAAA,WAAW,CAAC2B,WAAD,CAAX;AAEC;AAEJ,GAjCW,EAiCT,CAAC9B,OAAD,CAjCS,CAAT;AAoCAR,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AAEA,QAAM+C,aAAa,GAAGC,CAAC,IAAI;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAG;AACTC,MAAAA,IAAI,EAAE,SADG;AAETC,MAAAA,OAAO,EAAE;AACJ3D,QAAAA,MAAM,EAAEA,MADJ;AAEJO,QAAAA,QAAQ,EAAEA;AAFN;AAFA,KAAb;AAQAL,IAAAA,MAAM,CAAC0D,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAZ;AACAlC,IAAAA,UAAU,CAAC,KAAD,CAAV;AAGH,GAdD,CA1GqG,CA0HxG;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEI,QAAMwC,eAAe,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACR,cAAF;AACA,QAAI5B,UAAU,CAACI,OAAX,CAAmBe,MAAnB,IAA6B,CAA7B,IAAkCrB,aAAa,CAACM,OAApD,EAA6D;AAC7D,UAAMqB,GAAG,GAAGW,CAAC,CAACC,MAAF,CAASC,YAAT,CAAsB,MAAtB,CAAZ;AACA,UAAMC,OAAO,GAAGH,CAAC,CAACC,MAAF,CAASC,YAAT,CAAsB,MAAtB,CAAhB;AACAtB,IAAAA,aAAa,CAAC;AAACS,MAAAA,GAAG,EAAEA,GAAN;AAAWc,MAAAA,OAAO,EAAEA;AAApB,KAAD,EAA+BvC,UAA/B,EAA2CF,aAA3C,EAA0DC,aAA1D,EAAyEG,UAAzE,EAAqFG,aAArF,EAAoGlB,SAApG,EAA+GQ,UAA/G,CAAb;AACH,GAND;;AASApC,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIuC,aAAa,CAACM,OAAlB,EAA2B;AACvB,UAAI3B,OAAO,CAACS,MAAR,IAAkBV,IAAtB,EAA4B;AACxBW,QAAAA,SAAS,CAAC,IAAD,CAAT;AAEH,OAHD,MAGO;AACHA,QAAAA,SAAS,CAAC,KAAD,CAAT;AAEH;;AACDQ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GAXQ,EAWN,CAACjB,MAAD,CAXM,CAAT;AAaF,sBAAQ;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACN,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEE,YAAxB;AAAsC,MAAA,QAAQ,EAAEL,OAAO,CAACiE,IAAR,CAAcC,MAAD,IAAYA,MAAM,KAAKjE,IAApC;AAAhD;AAAA;AAAA;AAAA;AAAA,YADM,eAEN;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAEQ,KAAK,GAAG,uBAAH,GAA6B,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAEE,MAAM,GAAG,uBAAH,GAA6B,iBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAK,UAAA,SAAS,EAAEA,MAAM,IAAI,KAAV,GAAkB,uBAAlB,GAA4C,iBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAK,UAAA,OAAO,EAAGyC,CAAD,IAAOD,aAAa,CAACC,CAAD,CAAlC;AAAsC,UAAA,SAAS,EAAEjC,OAAO,GAAG,yBAAH,GAA+B,iBAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOE;AAAA,kBAAIlB;AAAJ;AAAA;AAAA;AAAA;AAAA,cAPF,EAQKc,OAAO,CAAC6B,MAAR,GAAiB,CAAjB,iBAAsB,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEnB,UAAU,CAACI,OAAhC;AAAyC,QAAA,QAAQ,EAAE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAR3B,EASKd,OAAO,CAAC6B,MAAR,GAAiB,CAAjB,iBAAsB;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,qCAAuC,QAAC,UAAD;AAAY,UAAA,UAAU,EAAEpB,aAAa,CAACK;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAAvC,eACvB,QAAC,SAAD;AAAW,UAAA,QAAQ,EAAE,OAArB;AAA8B,UAAA,SAAS,EAAE,IAAIJ,UAAU,CAACI,OAAX,CAAmBe,MAAvB,GAAgC;AAAzE;AAAA;AAAA;AAAA;AAAA,gBADuB;AAAA;AAAA;AAAA;AAAA;AAAA,cAT3B,eAWE;AAAO,QAAA,SAAS,EAAC,gBAAjB;AAAkC,QAAA,GAAG,EAAElB;AAAvC;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM,eAeN;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBACKT,QAAQ,CAAC,CAAD,CAAR,CAAYkD,GAAZ,CAAiBjB,GAAD,IAAS;AACtB,8BACI;AAAM,YAAA,KAAK,EAAEA,GAAG,CAACA,GAAjB;AAAsB,YAAA,SAAS,EAAG,WAAUA,GAAG,CAAClB,MAAO,EAAvD;AAAA,mCACI;AAAQ,cAAA,OAAO,EAAGoB,CAAD,IAAOQ,eAAe,CAACR,CAAD,CAAvC;AAA4C,cAAA,IAAI,EAAEF,GAAG,CAACA,GAAtD;AAA2D,cAAA,IAAI,EAAEA,GAAG,CAACA,GAAJ,CAAQkB,WAAR,GAAsBC,UAAtB,CAAiC,CAAjC,CAAjE;AAAsG,cAAA,SAAS,EAAG,gBAAenB,GAAG,CAAClB,MAAO,EAA5I;AAAA,wBAAgJkB,GAAG,CAACA,GAAJ,CAAQkB,WAAR;AAAhJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SANA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBACKnD,QAAQ,CAAC,CAAD,CAAR,CAAYkD,GAAZ,CAAiBjB,GAAD,IAAS;AACtB,8BACI;AAAM,YAAA,KAAK,EAAEA,GAAG,CAACA,GAAjB;AAAsB,YAAA,SAAS,EAAG,WAAUA,GAAG,CAAClB,MAAO,EAAvD;AAAA,mCACI;AAAQ,cAAA,OAAO,EAAGoB,CAAD,IAAOQ,eAAe,CAACR,CAAD,CAAvC;AAA4C,cAAA,IAAI,EAAEF,GAAG,CAACA,GAAtD;AAA2D,cAAA,IAAI,EAAEA,GAAG,CAACA,GAAJ,CAAQkB,WAAR,GAAsBC,UAAtB,CAAiC,CAAjC,CAAjE;AAAsG,cAAA,SAAS,EAAG,gBAAenB,GAAG,CAAClB,MAAO,EAA5I;AAAA,wBAAgJkB,GAAG,CAACA,GAAJ,CAAQkB,WAAR;AAAhJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SANA;AADL;AAAA;AAAA;AAAA;AAAA,cAVJ,eAmBI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAuC,UAAA,KAAK,EAAE,OAA9C;AAAA,iCACY;AAAQ,YAAA,OAAO,EAAGhB,CAAD,IAAOQ,eAAe,CAACR,CAAD,CAAvC;AAA4C,YAAA,IAAI,EAAE,EAAlD;AAAsD,YAAA,IAAI,EAAE,EAA5D;AAAgE,YAAA,SAAS,EAAG,cAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADZ;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIKnC,QAAQ,CAAC,CAAD,CAAR,CAAYkD,GAAZ,CAAiBjB,GAAD,IAAS;AAEtB,8BACI;AAAK,YAAA,KAAK,EAAEA,GAAG,CAACA,GAAhB;AAAsB,YAAA,SAAS,EAAG,WAAUA,GAAG,CAAClB,MAAO,EAAvD;AAAA,mCACI;AAAS,cAAA,OAAO,EAAGoB,CAAD,IAAOQ,eAAe,CAACR,CAAD,CAAxC;AAA6C,cAAA,IAAI,EAAEF,GAAG,CAACA,GAAvD;AAA4D,cAAA,IAAI,EAAEA,GAAG,CAACA,GAAJ,CAAQkB,WAAR,GAAsBC,UAAtB,CAAiC,CAAjC,CAAlE;AAAuG,cAAA,SAAS,EAAG,gBAAenB,GAAG,CAAClB,MAAO,EAA7I;AAAA,wBAAiJkB,GAAG,CAACA,GAAJ,CAAQkB,WAAR;AAAjJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SAPA,CAJL,eAYI;AAAK,UAAA,KAAK,EAAE,QAAZ;AAAsB,UAAA,SAAS,EAAC,sBAAhC;AAAA,iCACA;AAAQ,YAAA,OAAO,EAAGhB,CAAD,IAAOQ,eAAe,CAACR,CAAD,CAAvC;AAA4C,YAAA,IAAI,EAAE,CAAlD;AAAqD,YAAA,IAAI,EAAE,CAA3D;AAA8D,YAAA,SAAS,EAAG,cAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfM;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAqDD;;GA9QQxD,K;;KAAAA,K;AAgRT,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef, useReducer, useCallback} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nimport Opponent from \"./Opponent\";\r\nimport {keyrow1, keyrow2, keyrow3} from '../constants.js';\r\n\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID, opponentData, keysa}) {\r\n   console.log(\"remounted\");\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [currentRow, _setCurrentRow] = useState([])\r\n   const [history, _setHistory] = useState([])\r\n   const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3])\r\n   const [rematch, setRematch] = useState(false);\r\n   const [gameStatus, _setGameStatus] = useState(false);\r\n   const gameStatusRef = useRef(false)\r\n   const currentRowRef = useRef(currentRow)\r\n   const historyRef = useRef(history);\r\n   const testRef = useRef(null)\r\n\r\n   const setHistory = x => {\r\n       historyRef.current = x;\r\n       _setHistory(x);\r\n   }\r\n   const setCurrentRow = x => {\r\n       currentRowRef.current = x;\r\n       _setCurrentRow(x);\r\n   }\r\n\r\n   const setGameStatus = x => {\r\n        gameStatusRef.current = x;\r\n        _setGameStatus(x);\r\n   }\r\n\r\n\r\nuseEffect(() => {\r\n    if (gameEnd.status) {\r\n        setGameStatus(true);\r\n    } else {\r\n        setGameStatus(false);\r\n    }\r\n}, [gameEnd])\r\n\r\n\r\nuseEffect(() => {\r\n    var newKeys = [keyrow1, keyrow2, keyrow3];\r\n        for (var j in newKeys) {\r\n            for (var k in newKeys[j]) {\r\n                newKeys[j][k].status = \"none\"\r\n            }\r\n        }\r\n        if (!gameStatusRef.current) {\r\n            console.log(\"reverted\");\r\n            console.log(\"performing this right now bro\");\r\n            \r\n            setTimeout(() => {\r\n                setKeyboard([...newKeys, [Math.random()]])\r\n                console.log(\"final init\");\r\n            }, 100)\r\n        }\r\n   \r\n       \r\n    // }, true);\r\n    console.log(\"did this\");\r\n    setHistory([])\r\n    setCurrentRow([]);\r\n    setWinner(null);\r\n    window.addEventListener('keyup', middlewareKey);\r\n    testRef.current.focus()\r\n    return () => {\r\n        window.removeEventListener('keyup', middlewareKey)\r\n    }\r\n}, [wordle])\r\n\r\n   useEffect(() => {\r\n       console.log(\"init keyboard\");\r\n       console.log(history);\r\n    if (history.length > 0) {\r\n        console.log(\"changing keys\");\r\n        var initKeysOne = [keyrow1, keyrow2, keyrow3];\r\n    for (var a in history) {\r\n        \r\n        for (var c in history[a]) {\r\n            console.log(history[a][c]);\r\n            var flag = false\r\n            if (flag) break;\r\n            else {\r\n                for (const j in initKeysOne) {\r\n                    for (var b in initKeysOne[j]) {\r\n                        if (history[a][c].key == initKeysOne[j][b].key) {\r\n                            initKeysOne[j][b].status = history[a][c].status\r\n                            flag = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n    setKeyboard(initKeysOne)\r\n\r\n    }\r\n    \r\n}, [history])\r\n   \r\n\r\n   console.log(clientID);\r\n\r\n   const handleRematch = e => {\r\n       e.preventDefault();\r\n       const data = {\r\n           type: \"rematch\",\r\n           payload: {\r\n                gameID: gameID,\r\n                clientID: clientID,\r\n           }\r\n           \r\n       }\r\n       client.send(JSON.stringify(data));\r\n       setRematch(false);\r\n      \r\n       \r\n   }\r\n\r\n//    function middlewareKey(e) {\r\n//        checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch)\r\n//    }\r\n   \r\n   \r\n//    function checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch) {\r\n    \r\n//     if (historyRef.current.length == 6 || gameStatusRef.current ) return;\r\n//     console.log(e.keyCode);\r\n//     console.log(e.key);\r\n    \r\n//     if (currentRowRef.current.length == 5) {\r\n        \r\n//         if (e.keyCode == 13) {\r\n//             console.log(\"entered\");\r\n//             var word = currentRowRef.current\r\n\r\n//             console.log(word);\r\n//             if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n//                 setError(true);\r\n//                 setTimeout(() => {\r\n//                     setError(false)\r\n//                 }, 2000)\r\n//                 return \r\n//             }\r\n//        var target = wordle;\r\n//        var final = []\r\n//        for (var i in word) {\r\n//            var status = \"gray\"\r\n//            if (word[i] == target[i]) {\r\n//                status = \"green\"\r\n//                target = target.replace(word[i], \" \")\r\n//            } else if (target.includes(word[i])) {\r\n//                status = \"yellow\"\r\n//                target = target.replace(word[i], \" \")\r\n//            } \r\n//            final.push({key: word[i], status: status});\r\n          \r\n//        }\r\n//        setHistory([...historyRef.current, final])\r\n//        setCurrentRow([])\r\n     \r\n//     //    dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\r\n//        client.send(JSON.stringify({type: \"update\", payload: {rows: historyRef.current, clientID: clientID, gameID: gameID}}));\r\n//     //    setCurrentRow([])\r\n//        if (final.every((value) => value.status == \"green\")) {\r\n//         const data = {\r\n//             type: \"winner\",\r\n//             payload: {\r\n//                 winner: user,\r\n//                 gameID: gameID\r\n//                 }\r\n//         }\r\n//         client.send(JSON.stringify(data));\r\n//         setWinner(true);\r\n//         setRematch(true);\r\n//      }\r\n//         } \r\n//         else if (e.keyCode == 8) {\r\n//             const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1)\r\n//             setCurrentRow(tmp)\r\n//         }\r\n//     } else if (e.keyCode == 8) {\r\n//         const tmp = currentRowRef.current.slice(0, currentRowRef.current.length - 1)\r\n//         setCurrentRow(tmp)\r\n//     } else if (currentRowRef.current.length < 5) {\r\n//         if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n//             setCurrentRow([...currentRowRef.current, e.key])\r\n//         }\r\n\r\n//     }\r\n// }\r\n\r\n    const handleKeyChange = (d) => {\r\n        d.preventDefault();\r\n        if (historyRef.current.length == 6 || gameStatusRef.current) return;\r\n        const key = d.target.getAttribute(\"data\")\r\n        const keyCode = d.target.getAttribute(\"code\")\r\n        middlewareKey({key: key, keyCode: keyCode}, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch);\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        if (gameStatusRef.current) {\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n                \r\n            } else {\r\n                setWinner(false);\r\n                \r\n            }\r\n            setRematch(true);\r\n        }\r\n    }, [reload])\r\n\r\n  return (<div className=\"board-container\">\r\n    <Opponent opponentData={opponentData} opponent={players.find((player) => player !== user)}></Opponent>\r\n    <div className=\"user-container\">\r\n        <div className=\"toasty\">\r\n            <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n            <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n            <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>\r\n            <div onClick={(e) => handleRematch(e)}className={rematch ? \"toast-container rematch\" : \"toast-container\"}>Rematch</div>\r\n        </div>\r\n      <p>{user}</p>\r\n        {history.length > 0 && <HistoryRow history={historyRef.current} opponent={\"false\"}></HistoryRow>}\r\n        {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRowRef.current}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - historyRef.current.length - 1}></BlankRows></div>}\r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n      </div> \r\n    <div className=\"keyboard\">\r\n        <div className=\"keyrow one\">\r\n            {keyboard[0].map((key) => {\r\n                return (\r\n                    <div  value={key.key} className={`keytile ${key.status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key.key} code={key.key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow two\">\r\n            {keyboard[1].map((key) => {\r\n                return (\r\n                    <div  value={key.key} className={`keytile ${key.status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key.key} code={key.key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow three\">\r\n            <div className=\"keytile none special\"  value={\"ENTER\"}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={13} code={13} className={`keyboardtile`}>ENTER</button>\r\n                    </div>\r\n            {keyboard[2].map((key) => {\r\n                \r\n                return (\r\n                    <div value={key.key}  className={`keytile ${key.status}`}>\r\n                        <button  onClick={(e) => handleKeyChange(e)} data={key.key} code={key.key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n            <div value={\"DELETE\"} className=\"keytile none special\">\r\n            <button onClick={(e) => handleKeyChange(e)} data={8} code={8} className={`keyboardtile`}>DELETE</button>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}