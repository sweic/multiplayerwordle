{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Wrapper.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState, useContext } from 'react';\nimport Board from \"./Board\";\nimport { GameContext } from '../context/GameContext.js';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport JoinRoom from \"./JoinRoom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Wrapper(_ref) {\n  _s();\n\n  let {\n    client\n  } = _ref;\n  const {\n    gameID,\n    gameStatus,\n    setGameStatus,\n    setClientID,\n    setCreateJoin,\n    setGameID\n  } = useContext(GameContext);\n  const [wordle, setWordle] = useState(\"pinch\");\n  useEffect(() => {\n    client.onopen = () => {\n      console.log(\"client connected to server\");\n    };\n\n    client.onmessage = message => {\n      const data = JSON.parse(message.data);\n      console.log(data);\n\n      if (data.type == \"initial\") {\n        setClientID(data.clientID);\n        console.log(data.clientID);\n      }\n\n      if (data.type == \"create\") {\n        setGameID(data.gameID);\n        setCreateJoin(\"create\");\n      }\n    };\n  }, []);\n  useEffect(() => {\n    console.log(\"Reloaded\");\n  }, [gameStatus]);\n\n  const renderSwitch = gameStatus => {\n    switch (gameStatus) {\n      case \"waiting\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Waiting for other player to connect...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this);\n\n      case \"connected\":\n        return /*#__PURE__*/_jsxDEV(Board, {\n          client: client,\n          wordle: wordle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this);\n\n      case \"none\":\n        return /*#__PURE__*/_jsxDEV(JoinRoom, {\n          client: client\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderSwitch(gameStatus)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Wrapper, \"PvLijos4MXKzQtS7egYjxzZPQWw=\");\n\n_c = Wrapper;\nexport default Wrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrapper\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Wrapper.js"],"names":["React","useEffect","useState","useContext","Board","GameContext","w3cwebsocket","W3CWebSocket","JoinRoom","Wrapper","client","gameID","gameStatus","setGameStatus","setClientID","setCreateJoin","setGameID","wordle","setWordle","onopen","console","log","onmessage","message","data","JSON","parse","type","clientID","renderSwitch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA8C,OAA9C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AACA,SAAQC,YAAY,IAAIC,YAAxB,QAA2C,WAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AACA,SAASC,OAAT,OAA2B;AAAA;;AAAA,MAAV;AAACC,IAAAA;AAAD,GAAU;AACvB,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,aAArB;AAAoCC,IAAAA,WAApC;AAAiDC,IAAAA,aAAjD;AAAgEC,IAAAA;AAAhE,MAA6Eb,UAAU,CAACE,WAAD,CAA7F;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,OAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,MAAM,CAACS,MAAP,GAAgB,MAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,KAFD;;AAGAX,IAAAA,MAAM,CAACY,SAAP,GAAoBC,OAAD,IAAa;AAC5B,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,IAAnB,CAAb;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;;AACA,UAAIA,IAAI,CAACG,IAAL,IAAa,SAAjB,EAA4B;AAC1Bb,QAAAA,WAAW,CAACU,IAAI,CAACI,QAAN,CAAX;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACI,QAAjB;AACD;;AAED,UAAIJ,IAAI,CAACG,IAAL,IAAa,QAAjB,EAA2B;AACzBX,QAAAA,SAAS,CAACQ,IAAI,CAACb,MAAN,CAAT;AACAI,QAAAA,aAAa,CAAC,QAAD,CAAb;AACD;AACF,KAZH;AAcD,GAlBM,EAkBJ,EAlBI,CAAT;AAoBAd,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,GAFQ,EAEN,CAACT,UAAD,CAFM,CAAT;;AAIA,QAAMiB,YAAY,GAAIjB,UAAD,IAAgB;AACjC,YAAOA,UAAP;AACI,WAAK,SAAL;AACI,4BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAR;;AACJ,WAAK,WAAL;AACI,4BAAQ,QAAC,KAAD;AAAO,UAAA,MAAM,EAAEF,MAAf;AAAuB,UAAA,MAAM,EAAEO;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAAR;;AACJ,WAAK,MAAL;AACI,4BAAQ,QAAC,QAAD;AAAU,UAAA,MAAM,EAAEP;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAAR;AANR;AAQH,GATD;;AAYF,sBAAO;AAAA,cAAMmB,YAAY,CAACjB,UAAD;AAAlB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAzCQH,O;;KAAAA,O;AA2CT,eAAeA,OAAf","sourcesContent":["import React from 'react';\r\nimport {useEffect, useState, useContext} from 'react';\r\nimport Board from \"./Board\";\r\nimport {GameContext} from '../context/GameContext.js'\r\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\r\nimport JoinRoom from \"./JoinRoom\";\r\nfunction Wrapper({client}) {\r\n    const {gameID, gameStatus, setGameStatus, setClientID, setCreateJoin, setGameID} = useContext(GameContext);\r\n    const [wordle, setWordle] = useState(\"pinch\")\r\n\r\n    useEffect(() => {\r\n        client.onopen = () => {\r\n          console.log(\"client connected to server\");\r\n        }\r\n        client.onmessage = (message) => {\r\n            const data = JSON.parse(message.data);\r\n            console.log(data);\r\n            if (data.type == \"initial\") {\r\n              setClientID(data.clientID)\r\n              console.log(data.clientID);\r\n            }\r\n      \r\n            if (data.type == \"create\") {\r\n              setGameID(data.gameID);\r\n              setCreateJoin(\"create\");\r\n            }\r\n          }\r\n        \r\n      }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"Reloaded\")\r\n    }, [gameStatus])\r\n\r\n    const renderSwitch = (gameStatus) => {\r\n        switch(gameStatus) {\r\n            case(\"waiting\"):\r\n                return (<div>Waiting for other player to connect...</div>);\r\n            case(\"connected\"):\r\n                return (<Board client={client} wordle={wordle}></Board>);\r\n            case(\"none\"):\r\n                return (<JoinRoom client={client}></JoinRoom>)\r\n        }\r\n    }\r\n\r\n\r\n  return <div>{renderSwitch(gameStatus)}</div>\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}