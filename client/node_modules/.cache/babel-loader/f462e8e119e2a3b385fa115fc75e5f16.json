{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordle-io\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport Opponent from \"./Opponent\";\nimport { letterKeys, fullKeyboard } from '../constants.js';\nimport { useGameStatus } from '../functions/handler.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID,\n    opponentData,\n    keysa\n  } = _ref;\n  const {\n    gameStatusRef,\n    setGameStatus,\n    currentRow,\n    currentRowRef,\n    setCurrentRow,\n    history,\n    historyRef,\n    setHistory,\n    error,\n    setError,\n    winner,\n    setWinner,\n    rematch,\n    setRematch,\n    resetKeys,\n    colourKeys,\n    checkKey,\n    counter,\n    setCounter,\n    updateKeys,\n    tie,\n    setTie,\n    keyboard,\n    setKeyboard\n  } = useGameStatus();\n  useEffect(() => {\n    if (gameEnd.status) {\n      setGameStatus(true);\n    } else {\n      setGameStatus(false);\n    }\n  }, [gameEnd]);\n  useEffect(() => {}, [wordle]);\n  useEffect(() => {\n    updateKeys();\n  }, [history]);\n\n  const handleRematch = e => {\n    e.preventDefault();\n    const data = {\n      type: \"rematch\",\n      payload: {\n        gameID: gameID,\n        clientID: clientID\n      }\n    };\n    client.send(JSON.stringify(data));\n    setRematch(false);\n  };\n\n  const middlewareKey = e => {\n    checkKey(e, wordle, client, clientID, gameID, user);\n  };\n\n  const handleKeyChange = d => {\n    d.preventDefault();\n    if (historyRef.current.length == 6 || gameStatusRef.current) return;\n    const key = d.target.getAttribute(\"data\");\n    const keyCode = d.target.getAttribute(\"code\");\n    middlewareKey({\n      key: key,\n      keyCode: keyCode\n    });\n  };\n\n  useEffect(() => {\n    if (gameStatusRef.current) {\n      if (gameEnd.winner == user) {\n        setWinner(true);\n      } else if (gameEnd.tie) {\n        setTie(true);\n      } else {\n        setWinner(false);\n      }\n\n      setRematch(true);\n    }\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(Opponent, {\n      opponentData: opponentData,\n      opponent: players.find(player => player !== user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toasty\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: error ? \"toast-container error\" : \"toast-container\",\n          children: \"Not a word!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 23\n        }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner ? \"toast-container error\" : \"toast-container\",\n          children: \"You won!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 24\n        }, this), winner == false && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner == false ? \"toast-container error\" : \"toast-container\",\n          children: \"You lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 33\n        }, this), tie && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: tie ? \"toast-container error\" : \"toast-container\",\n          children: \"Tie!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), rematch && /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => handleRematch(e),\n          className: rematch ? \"toast-container rematch\" : \"toast-container\",\n          children: \"Rematch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n        history: historyRef.current,\n        opponent: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 32\n      }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentrow-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n          currentRow: currentRowRef.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n          opponent: \"false\",\n          blankRows: 6 - historyRef.current.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"fallback-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow one\",\n        children: letterKeys[0].map(target => {\n          const key = keyboard[target].key;\n          const status = keyboard[target].status;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key,\n            className: `keytile ${status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key,\n              code: key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${status}`,\n              children: key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 25\n            }, this)\n          }, `${key} ${status}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow two\",\n        children: letterKeys[1].map(target => {\n          const key = keyboard[target].key;\n          const status = keyboard[target].status;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key,\n            className: `keytile ${status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key,\n              code: key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${status}`,\n              children: key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this)\n          }, `${key} ${status}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow three\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keytile none special\",\n          value: \"ENTER\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: 13,\n            code: 13,\n            className: `keyboardtile`,\n            children: \"ENTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), letterKeys[2].map(target => {\n          const key = keyboard[target].key;\n          const status = keyboard[target].status;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key,\n            className: `keytile ${status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key,\n              code: key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${status}`,\n              children: key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 25\n            }, this)\n          }, `${key} ${status}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"DELETE\",\n          className: \"keytile none special\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: 8,\n            code: 8,\n            className: `keyboardtile`,\n            children: \"BACK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"CY/6NAu82TFJbtkNYG9ttz4hn20=\", false, function () {\n  return [useGameStatus];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordle-io/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","CurrentRow","BlankRows","Opponent","letterKeys","fullKeyboard","useGameStatus","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","opponentData","keysa","gameStatusRef","setGameStatus","currentRow","currentRowRef","setCurrentRow","history","historyRef","setHistory","error","setError","winner","setWinner","rematch","setRematch","resetKeys","colourKeys","checkKey","counter","setCounter","updateKeys","tie","setTie","keyboard","setKeyboard","status","handleRematch","e","preventDefault","data","type","payload","send","JSON","stringify","middlewareKey","handleKeyChange","d","current","length","key","target","getAttribute","keyCode","find","player","map","toUpperCase","charCodeAt"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport Opponent from \"./Opponent\";\r\nimport {letterKeys, fullKeyboard} from '../constants.js';\r\nimport {useGameStatus} from '../functions/handler.js'\r\n\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID, opponentData, keysa}) {\r\n  \r\n   \r\n   \r\n   \r\n   const {gameStatusRef, setGameStatus, currentRow, currentRowRef, setCurrentRow, history, historyRef, setHistory, error, setError, winner, setWinner, rematch, setRematch, resetKeys, colourKeys, checkKey, counter, setCounter, updateKeys, tie, setTie,keyboard, setKeyboard} = useGameStatus()\r\n   \r\nuseEffect(() => {\r\n    if (gameEnd.status) {\r\n        setGameStatus(true);\r\n    } else {\r\n        setGameStatus(false);\r\n    }\r\n}, [gameEnd])\r\n\r\nuseEffect(() => {\r\n    \r\n}, [wordle])\r\n\r\n   useEffect(() => {\r\n    updateKeys()\r\n}, [history])\r\n   \r\n   const handleRematch = e => {\r\n       e.preventDefault();\r\n       const data = {\r\n           type: \"rematch\",\r\n           payload: {\r\n                gameID: gameID,\r\n                clientID: clientID,\r\n           }\r\n       }\r\n       client.send(JSON.stringify(data));\r\n       setRematch(false);\r\n      \r\n       \r\n   }\r\n\r\n    const middlewareKey = (e) => {\r\n    checkKey(e, wordle, client, clientID, gameID, user)\r\n}\r\n\r\n    const handleKeyChange = (d) => {\r\n        d.preventDefault();\r\n        if (historyRef.current.length == 6 || gameStatusRef.current) return;\r\n        const key = d.target.getAttribute(\"data\")\r\n        const keyCode = d.target.getAttribute(\"code\")\r\n        middlewareKey({key: key, keyCode: keyCode});\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        if (gameStatusRef.current) {\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n            } else if (gameEnd.tie) {\r\n                setTie(true)\r\n            } else {\r\n                setWinner(false)\r\n            }\r\n            setRematch(true);\r\n        }\r\n    }, [reload])\r\n\r\n  return (<div className=\"board-container\">\r\n    <Opponent opponentData={opponentData} opponent={players.find((player) => player !== user)}></Opponent>\r\n    <div className=\"user-container\">\r\n        <div className=\"toasty\">\r\n            {error && <div className={error ? \"toast-container error\" : \"toast-container\"}>Not a word!</div>}\r\n            {winner && <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>}\r\n            {winner == false && <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>}\r\n            {tie && <div className={tie ? \"toast-container error\" : \"toast-container\"}>Tie!</div>}\r\n            {rematch &&<div onClick={(e) => handleRematch(e)}className={rematch ? \"toast-container rematch\" : \"toast-container\"}>Rematch</div>}\r\n        </div>\r\n      <p>{user}</p>\r\n        {history.length > 0 && <HistoryRow history={historyRef.current} opponent={\"false\"}></HistoryRow>}\r\n        {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRowRef.current}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - historyRef.current.length - 1}></BlankRows></div>}\r\n      <input className=\"fallback-input\" ></input>\r\n      </div> \r\n    <div className=\"keyboard\">\r\n        {}\r\n        <div className=\"keyrow one\">\r\n            {letterKeys[0].map((target) => {\r\n                const key = keyboard[target].key;\r\n                const status = keyboard[target].status\r\n                return (\r\n                    <div  value={key} key={`${key} ${status}`} className={`keytile ${status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key} code={key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${status}`}>{key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow two\">\r\n            {letterKeys[1].map((target) => {\r\n                const key = keyboard[target].key;\r\n                const status = keyboard[target].status\r\n                return (\r\n                    <div  value={key} key={`${key} ${status}`} className={`keytile ${status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key} code={key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${status}`}>{key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow three\">\r\n            <div className=\"keytile none special\"  value={\"ENTER\"}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={13} code={13} className={`keyboardtile`}>ENTER</button>\r\n                    </div>\r\n            {letterKeys[2].map((target) => {\r\n                const key = keyboard[target].key;\r\n                const status = keyboard[target].status\r\n                return (\r\n                    <div value={key} key={`${key} ${status}`} className={`keytile ${status}`}>\r\n                        <button  onClick={(e) => handleKeyChange(e)} data={key} code={key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${status}`}>{key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n            <div value={\"DELETE\"} className=\"keytile none special\">\r\n            <button onClick={(e) => handleKeyChange(e)} data={8} code={8} className={`keyboardtile`}>BACK</button>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}