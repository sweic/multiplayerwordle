{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport Opponent from \"./Opponent\";\nimport { keyrow1, keyrow2, keyrow3, letterKeys, fullKeyboard } from '../constants.js';\nimport { checkKey, resetKeys, colourKeys } from '../functions/handler.js';\nimport { useStateRef } from '../hooks/index.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID,\n    opponentData,\n    keysa\n  } = _ref;\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [keyboard, setKeyboard] = useState(fullKeyboard);\n  const [rematch, setRematch] = useState(false);\n  const [tie, setTie] = useState(false);\n  const [gameStatus, gameStatusRef, setGameStatus] = useStateRef(false);\n  const [currentRow, currentRowRef, setCurrentRow] = useStateRef([]);\n  const [history, historyRef, setHistory] = useStateRef([]);\n  useEffect(() => {\n    if (gameEnd.status) {\n      setGameStatus(true);\n    } else {\n      setGameStatus(false);\n    }\n  }, [gameEnd]);\n  useEffect(() => {\n    const dirty = fullKeyboard;\n    var newKeys = resetKeys(dirty);\n\n    if (!gameStatusRef.current) {\n      setTimeout(() => {\n        setKeyboard(newKeys);\n      }, 100);\n    }\n\n    setHistory([]);\n    setCurrentRow([]);\n    setWinner(null);\n    setTie(false);\n    window.addEventListener('keyup', middlewareKey);\n    return () => {\n      window.removeEventListener('keyup', middlewareKey);\n    };\n  }, [wordle]);\n  useEffect(() => {\n    if (history.length > 0) {\n      const initKeys1 = fullKeyboard;\n      var initKeysOne = colourKeys(initKeys1, history);\n      setKeyboard(initKeysOne);\n    }\n  }, [history]);\n\n  const handleRematch = e => {\n    e.preventDefault();\n    const data = {\n      type: \"rematch\",\n      payload: {\n        gameID: gameID,\n        clientID: clientID\n      }\n    };\n    client.send(JSON.stringify(data));\n    setRematch(false);\n  };\n\n  function middlewareKey(e) {\n    checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch, setError, wordle, client, clientID, gameID, user);\n  }\n\n  const handleKeyChange = d => {\n    d.preventDefault();\n    if (historyRef.current.length == 6 || gameStatusRef.current) return;\n    const key = d.target.getAttribute(\"data\");\n    const keyCode = d.target.getAttribute(\"code\");\n    middlewareKey({\n      key: key,\n      keyCode: keyCode\n    });\n  };\n\n  useEffect(() => {\n    if (gameStatusRef.current) {\n      if (gameEnd.winner == user) {\n        setWinner(true);\n      } else if (gameEnd.tie) {\n        setTie(true);\n      } else {\n        setWinner(false);\n      }\n\n      setRematch(true);\n    }\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(Opponent, {\n      opponentData: opponentData,\n      opponent: players.find(player => player !== user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toasty\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: error ? \"toast-container error\" : \"toast-container\",\n          children: \"Not a word!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 23\n        }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner ? \"toast-container error\" : \"toast-container\",\n          children: \"You won!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 24\n        }, this), winner == false && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner == false ? \"toast-container error\" : \"toast-container\",\n          children: \"You lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 33\n        }, this), tie && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: tie ? \"toast-container error\" : \"toast-container\",\n          children: \"Tie!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), rematch && /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => handleRematch(e),\n          className: rematch ? \"toast-container rematch\" : \"toast-container\",\n          children: \"Rematch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n        history: historyRef.current,\n        opponent: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 32\n      }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentrow-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n          currentRow: currentRowRef.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n          opponent: \"false\",\n          blankRows: 6 - historyRef.current.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"fallback-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow one\",\n        children: letterKeys[0].map(target => {\n          const key = keyboard[target].key;\n          const status = keyboard[target].status;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key,\n            className: `keytile ${status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key,\n              code: key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${status}`,\n              children: key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }, this)\n          }, `${key} ${status}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow two\",\n        children: letterKeys[1].map(target => {\n          const key = keyboard[target].key;\n          const status = keyboard[target].status;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key,\n            className: `keytile ${status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key,\n              code: key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${status}`,\n              children: key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 25\n            }, this)\n          }, `${key} ${status}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow three\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keytile none special\",\n          value: \"ENTER\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: 13,\n            code: 13,\n            className: `keyboardtile`,\n            children: \"ENTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), letterKeys[2].map(target => {\n          const key = keyboard[target].key;\n          const status = keyboard[target].status;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key,\n            className: `keytile ${status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key,\n              code: key.toUpperCase().charCodeAt(0),\n              className: `keyboardtile ${status}`,\n              children: key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 25\n            }, this)\n          }, `${key} ${status}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"DELETE\",\n          className: \"keytile none special\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: 8,\n            code: 8,\n            className: `keyboardtile`,\n            children: \"BACK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"ILkzgOHLyE7UG7jv8L5YuniJh5g=\", false, function () {\n  return [useStateRef, useStateRef, useStateRef];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","CurrentRow","BlankRows","Opponent","keyrow1","keyrow2","keyrow3","letterKeys","fullKeyboard","checkKey","resetKeys","colourKeys","useStateRef","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","opponentData","keysa","error","setError","winner","setWinner","keyboard","setKeyboard","rematch","setRematch","tie","setTie","gameStatus","gameStatusRef","setGameStatus","currentRow","currentRowRef","setCurrentRow","history","historyRef","setHistory","status","dirty","newKeys","current","setTimeout","window","addEventListener","middlewareKey","removeEventListener","length","initKeys1","initKeysOne","handleRematch","e","preventDefault","data","type","payload","send","JSON","stringify","handleKeyChange","d","key","target","getAttribute","keyCode","find","player","map","toUpperCase","charCodeAt"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport Opponent from \"./Opponent\";\r\nimport {keyrow1, keyrow2, keyrow3, letterKeys, fullKeyboard} from '../constants.js';\r\nimport {checkKey, resetKeys, colourKeys} from '../functions/handler.js'\r\nimport {useStateRef} from '../hooks/index.js';\r\n\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID, opponentData, keysa}) {\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [keyboard, setKeyboard] = useState(fullKeyboard)\r\n   const [rematch, setRematch] = useState(false);\r\n   const [tie, setTie] = useState(false)\r\n  \r\n   const [gameStatus, gameStatusRef, setGameStatus] = useStateRef(false);\r\n   const [currentRow, currentRowRef, setCurrentRow] = useStateRef([])\r\n   const [history, historyRef, setHistory] = useStateRef([])\r\n\r\nuseEffect(() => {\r\n    if (gameEnd.status) {\r\n        setGameStatus(true);\r\n    } else {\r\n        setGameStatus(false);\r\n    }\r\n}, [gameEnd])\r\n\r\nuseEffect(() => {\r\n    const dirty = fullKeyboard;\r\n    var newKeys = resetKeys(dirty);\r\n    if (!gameStatusRef.current) {\r\n        setTimeout(() => {\r\n            setKeyboard(newKeys)\r\n        }, 100)\r\n    }\r\n    setHistory([])\r\n    setCurrentRow([]);\r\n    setWinner(null);\r\n    setTie(false)\r\n    window.addEventListener('keyup', middlewareKey);\r\n    \r\n    return () => {\r\n        window.removeEventListener('keyup', middlewareKey)\r\n    }\r\n}, [wordle])\r\n\r\n   useEffect(() => {\r\n    if (history.length > 0) {\r\n        const initKeys1 = fullKeyboard;\r\n        var initKeysOne = colourKeys(initKeys1, history);\r\n    setKeyboard(initKeysOne)\r\n    }\r\n}, [history])\r\n   \r\n   const handleRematch = e => {\r\n       e.preventDefault();\r\n       const data = {\r\n           type: \"rematch\",\r\n           payload: {\r\n                gameID: gameID,\r\n                clientID: clientID,\r\n           }\r\n           \r\n       }\r\n       client.send(JSON.stringify(data));\r\n       setRematch(false);\r\n      \r\n       \r\n   }\r\n    function middlewareKey(e) {\r\n    checkKey(e, historyRef, gameStatusRef, currentRowRef, setHistory, setCurrentRow, setWinner, setRematch, setError, wordle, client, clientID, gameID, user)\r\n}\r\n\r\n    const handleKeyChange = (d) => {\r\n        d.preventDefault();\r\n        if (historyRef.current.length == 6 || gameStatusRef.current) return;\r\n        const key = d.target.getAttribute(\"data\")\r\n        const keyCode = d.target.getAttribute(\"code\")\r\n        middlewareKey({key: key, keyCode: keyCode});\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        if (gameStatusRef.current) {\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n            } else if (gameEnd.tie) {\r\n                setTie(true)\r\n            } else {\r\n                setWinner(false)\r\n            }\r\n            setRematch(true);\r\n        }\r\n    }, [reload])\r\n\r\n  return (<div className=\"board-container\">\r\n    <Opponent opponentData={opponentData} opponent={players.find((player) => player !== user)}></Opponent>\r\n    <div className=\"user-container\">\r\n        <div className=\"toasty\">\r\n            {error && <div className={error ? \"toast-container error\" : \"toast-container\"}>Not a word!</div>}\r\n            {winner && <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>}\r\n            {winner == false && <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>}\r\n            {tie && <div className={tie ? \"toast-container error\" : \"toast-container\"}>Tie!</div>}\r\n            {rematch &&<div onClick={(e) => handleRematch(e)}className={rematch ? \"toast-container rematch\" : \"toast-container\"}>Rematch</div>}\r\n        </div>\r\n      <p>{user}</p>\r\n        {history.length > 0 && <HistoryRow history={historyRef.current} opponent={\"false\"}></HistoryRow>}\r\n        {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRowRef.current}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - historyRef.current.length - 1}></BlankRows></div>}\r\n      <input className=\"fallback-input\" ></input>\r\n      </div> \r\n    <div className=\"keyboard\">\r\n        <div className=\"keyrow one\">\r\n            {letterKeys[0].map((target) => {\r\n                const key = keyboard[target].key;\r\n                const status = keyboard[target].status\r\n                return (\r\n                    <div  value={key} key={`${key} ${status}`} className={`keytile ${status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key} code={key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${status}`}>{key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow two\">\r\n            {letterKeys[1].map((target) => {\r\n                const key = keyboard[target].key;\r\n                const status = keyboard[target].status\r\n                return (\r\n                    <div  value={key} key={`${key} ${status}`} className={`keytile ${status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key} code={key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${status}`}>{key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow three\">\r\n            <div className=\"keytile none special\"  value={\"ENTER\"}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={13} code={13} className={`keyboardtile`}>ENTER</button>\r\n                    </div>\r\n            {letterKeys[2].map((target) => {\r\n                const key = keyboard[target].key;\r\n                const status = keyboard[target].status\r\n                return (\r\n                    <div value={key} key={`${key} ${status}`} className={`keytile ${status}`}>\r\n                        <button  onClick={(e) => handleKeyChange(e)} data={key} code={key.toUpperCase().charCodeAt(0)} className={`keyboardtile ${status}`}>{key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n            <div value={\"DELETE\"} className=\"keytile none special\">\r\n            <button onClick={(e) => handleKeyChange(e)} data={8} code={8} className={`keyboardtile`}>BACK</button>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}