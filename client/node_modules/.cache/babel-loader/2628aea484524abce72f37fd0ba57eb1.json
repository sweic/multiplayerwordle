{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport Opponent from \"./Opponent\";\nimport Keyboard from \"./Keyboard\";\nimport { keyrow1, keyrow2, keyrow3 } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID,\n    opponentData\n  } = _ref;\n  const [history, setHistory] = useState([]);\n  const [currentRow, setCurrentRow] = useState([]);\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3]);\n  useEffect(() => {\n    const initKeys = [keyrow1, keyrow2, keyrow3];\n    setKeyboard(initKeys);\n    console.log(initKeys);\n  }, []);\n  useEffect(() => {\n    var initKeys = [keyrow1, keyrow2, keyrow3];\n\n    for (var a in history) {\n      for (var c in history[a]) {\n        var flag = false;\n        if (flag) break;else {\n          for (const j in initKeys) {\n            for (var b in initKeys[j]) {\n              if (history[a][c].key == initKeys[j][b].key) {\n                initKeys[j][b].status = history[a][c].status;\n                flag = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setKeyboard(initKeys);\n  }, [history]);\n  const testRef = useRef(null);\n  console.log(clientID);\n  var prevRow = [];\n  var prevHistory = [];\n  prevHistory = [];\n\n  function checkKey(e) {\n    if (prevHistory.length == 6 || gameEnd.status) return;\n\n    if (prevRow.length == 5) {\n      if (e.keyCode == 13) {\n        var word = prevRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            key: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...prevHistory, final]);\n        prevHistory.push(final);\n        client.send(JSON.stringify({\n          type: \"update\",\n          payload: {\n            rows: prevHistory,\n            clientID: clientID,\n            gameID: gameID\n          }\n        }));\n        setCurrentRow([]);\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true);\n          prevHistory = [];\n          prevRow = [];\n        }\n      } else if (e.keyCode == 8) {\n        const tmp = prevRow.slice(0, prevRow.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp;\n      }\n    } else if (e.keyCode == 8) {\n      const tmp = prevRow.slice(0, prevRow.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp;\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\n      setCurrentRow([...prevRow, e.key]);\n      prevRow.push(e.key);\n    }\n  }\n\n  const handleKeyChange = d => {\n    d.preventDefault();\n    const e = d.target.getAttribute(\"data\").charCodeAt(0);\n    console.log(e);\n    if (prevHistory.length == 6 || gameEnd.status) return;\n\n    if (prevRow.length == 5) {\n      if (e == 13) {\n        var word = prevRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            key: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...prevHistory, final]);\n        prevHistory.push(final);\n        client.send(JSON.stringify({\n          type: \"update\",\n          payload: {\n            rows: prevHistory,\n            clientID: clientID,\n            gameID: gameID\n          }\n        }));\n        setCurrentRow([]);\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true);\n          prevHistory = [];\n          prevRow = [];\n        }\n      } else if (e == 8) {\n        const tmp = prevRow.slice(0, prevRow.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp;\n      }\n    } else if (e == 8) {\n      const tmp = prevRow.slice(0, prevRow.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp;\n    } else if (e >= 65 && e <= 90) {\n      setCurrentRow([...prevRow, e.key]);\n      prevRow.push(e.key);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"did this\");\n    window.addEventListener('keyup', checkKey);\n    testRef.current.focus();\n    setTimeout(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => {\n      window.removeEventListener('keyup', checkKey);\n    };\n  }, []);\n  useEffect(() => {\n    if (gameEnd.status) {\n      window.addEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n\n      if (gameEnd.winner == user) {\n        setWinner(true);\n        window.removeEventListener('keyup', checkKey);\n      } else {\n        setWinner(false);\n        window.removeEventListener('keyup', checkKey);\n      }\n    }\n\n    return () => {\n      window.removeEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n    };\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toasty\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: error ? \"toast-container error\" : \"toast-container\",\n        children: \"Not in word list!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner ? \"toast-container error\" : \"toast-container\",\n        children: \"You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner == false ? \"toast-container error\" : \"toast-container\",\n        children: \"You lost!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Opponent, {\n      opponentData: opponentData,\n      opponent: players.find(player => player !== user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 7\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n        history: history,\n        opponent: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 32\n      }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentrow-containers\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n          currentRow: currentRow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n          opponent: \"false\",\n          blankRows: 6 - history.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"fallback-input\",\n        ref: testRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow one\",\n        children: keyboard[0].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow two\",\n        children: keyboard[1].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow three\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keytile none special\",\n          value: \"ENTER\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: \"ENTER\",\n            className: `keyboardtile`,\n            children: \"ENTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 7\n        }, this), keyboard[2].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 19\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"DELETE\",\n          className: \"keytile none special\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: \"DELETE\",\n            className: `keyboardtile`,\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"NykXep7MB7A9ogT9apCKpyL0RwY=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Opponent","Keyboard","keyrow1","keyrow2","keyrow3","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","opponentData","history","setHistory","currentRow","setCurrentRow","error","setError","winner","setWinner","timer","setTimer","keyboard","setKeyboard","initKeys","console","log","a","c","flag","j","b","key","status","testRef","prevRow","prevHistory","checkKey","e","length","keyCode","word","includes","join","setTimeout","target","final","i","replace","push","send","JSON","stringify","type","payload","rows","every","value","data","tmp","slice","handleKeyChange","d","preventDefault","getAttribute","charCodeAt","window","addEventListener","current","focus","removeEventListener","event","stopImmediatePropagation","find","player","map","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nimport Opponent from \"./Opponent\";\r\nimport Keyboard from \"./Keyboard\";\r\nimport {keyrow1, keyrow2, keyrow3} from '../constants.js';\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID, opponentData}) {\r\n   const [history, setHistory] = useState([])\r\n   const [currentRow, setCurrentRow] = useState([]);\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [timer, setTimer] = useState(0)\r\n   const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3])\r\n\r\n   useEffect(() => {\r\n       const initKeys = [keyrow1, keyrow2, keyrow3];\r\n       setKeyboard(initKeys);\r\n       console.log(initKeys);\r\n    \r\n   }, [])\r\n\r\n   useEffect(() => {\r\n    var initKeys = [keyrow1, keyrow2, keyrow3];\r\n    for (var a in history) {\r\n        for (var c in history[a]) {\r\n            var flag = false\r\n            if (flag) break;\r\n            else {\r\n                for (const j in initKeys) {\r\n                    for (var b in initKeys[j]) {\r\n                        if (history[a][c].key == initKeys[j][b].key) {\r\n                            initKeys[j][b].status = history[a][c].status\r\n                            flag = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n    setKeyboard(initKeys)\r\n}, [history])\r\n   \r\n   const testRef = useRef(null)\r\n\r\n   console.log(clientID);\r\n   var prevRow = []\r\n   var prevHistory = []\r\n   prevHistory = [];\r\n\r\n   \r\n\r\n   function checkKey(e) {\r\n      \r\n    if (prevHistory.length == 6 || gameEnd.status ) return;\r\n    if (prevRow.length == 5) {\r\n        if (e.keyCode == 13) {\r\n            \r\n            var word = prevRow\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({key: word[i], status: status});\r\n          \r\n       }\r\n       setHistory([...prevHistory, final])\r\n       prevHistory.push(final)\r\n       client.send(JSON.stringify({type: \"update\", payload: {rows: prevHistory, clientID: clientID, gameID: gameID}}));\r\n       setCurrentRow([])\r\n       prevRow = []\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        const data = {\r\n            type: \"winner\",\r\n            payload: {\r\n                winner: user,\r\n                gameID: gameID\r\n                }\r\n        }\r\n        client.send(JSON.stringify(data));\r\n        setWinner(true);\r\n        prevHistory = [];\r\n        prevRow = [];\r\n       \r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        setCurrentRow(tmp)\r\n        prevRow = tmp;\r\n     \r\n            \r\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n        setCurrentRow([...prevRow, e.key])\r\n        prevRow.push(e.key)\r\n       \r\n    }\r\n}\r\n\r\n    const handleKeyChange = (d) => {\r\n        \r\n        d.preventDefault();\r\n        const e = d.target.getAttribute(\"data\").charCodeAt(0);\r\n        console.log(e);\r\n        if (prevHistory.length == 6 || gameEnd.status) return;\r\n\r\n        if (prevRow.length == 5) {\r\n            if (e == 13) {\r\n                \r\n                var word = prevRow\r\n    \r\n                console.log(word);\r\n                if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                    setError(true);\r\n                    setTimeout(() => {\r\n                        setError(false)\r\n                    }, 2000)\r\n                    return \r\n                }\r\n           var target = wordle;\r\n           var final = []\r\n           for (var i in word) {\r\n               var status = \"gray\"\r\n               if (word[i] == target[i]) {\r\n                   status = \"green\"\r\n                   target = target.replace(word[i], \" \")\r\n               } else if (target.includes(word[i])) {\r\n                   status = \"yellow\"\r\n                   target = target.replace(word[i], \" \")\r\n               } \r\n               final.push({key: word[i], status: status});\r\n              \r\n           }\r\n           setHistory([...prevHistory, final])\r\n           prevHistory.push(final)\r\n           client.send(JSON.stringify({type: \"update\", payload: {rows: prevHistory, clientID: clientID, gameID: gameID}}));\r\n           setCurrentRow([])\r\n           prevRow = []\r\n           if (final.every((value) => value.status == \"green\")) {\r\n            const data = {\r\n                type: \"winner\",\r\n                payload: {\r\n                    winner: user,\r\n                    gameID: gameID\r\n                    }\r\n            }\r\n            client.send(JSON.stringify(data));\r\n            setWinner(true);\r\n            prevHistory = [];\r\n            prevRow = [];\r\n           \r\n         }\r\n            } \r\n            else if (e == 8) {\r\n                const tmp = prevRow.slice(0, prevRow.length - 1)\r\n                setCurrentRow(tmp)\r\n                prevRow = tmp;\r\n    \r\n            }\r\n        } else if (e == 8) {\r\n            const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n         \r\n                \r\n        } else if (e >= 65 && e <= 90) {\r\n            setCurrentRow([...prevRow, e.key])\r\n            prevRow.push(e.key)\r\n           \r\n        }\r\n\r\n\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"did this\");\r\n        window.addEventListener('keyup', checkKey);\r\n        testRef.current.focus()\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n        return () => {\r\n            window.removeEventListener('keyup', checkKey);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        if (gameEnd.status) {\r\n            window.addEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n                window.removeEventListener('keyup', checkKey);\r\n                \r\n            } else {\r\n                setWinner(false);\r\n                window.removeEventListener('keyup', checkKey);\r\n            }\r\n        }\r\n        return () => {\r\n            window.removeEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n        }\r\n\r\n    }, [reload])\r\n\r\n    \r\n\r\n\r\n  return (<div className=\"board-container\">\r\n       <div className=\"toasty\">\r\n      <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n      <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n      <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>\r\n      </div>\r\n      <Opponent opponentData={opponentData} opponent={players.find((player) => player !== user)}></Opponent>\r\n     \r\n     \r\n        <div className=\"user-container\">\r\n      <p>{user}</p>\r\n        {history.length > 0 && <HistoryRow history={history} opponent={\"false\"}></HistoryRow>}\r\n       {history.length < 6 && <div className=\"currentrow-containers\"> <CurrentRow currentRow={currentRow}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - history.length - 1}></BlankRows></div>}\r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n      </div> \r\n      <div className=\"keyboard\">\r\n      <div className=\"keyrow one\">\r\n          {keyboard[0].map((key) => {\r\n              return (\r\n                  <div  value={key.key} className={`keytile ${key.status}`}>\r\n                      <button onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                  </div>\r\n              )\r\n          })}\r\n      </div>\r\n      <div className=\"keyrow two\">\r\n          {keyboard[1].map((key) => {\r\n              return (\r\n                  <div  value={key.key} className={`keytile ${key.status}`}>\r\n                      <button onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                  </div>\r\n              )\r\n          })}\r\n      </div>\r\n      <div className=\"keyrow three\">\r\n      <div className=\"keytile none special\"  value={\"ENTER\"}>\r\n                      <button onClick={(e) => handleKeyChange(e)} data={\"ENTER\"} className={`keyboardtile`}>ENTER</button>\r\n                  </div>\r\n          {keyboard[2].map((key) => {\r\n              \r\n              return (\r\n                  <div value={key.key}  className={`keytile ${key.status}`}>\r\n                      <button  onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                  </div>\r\n              )\r\n          })}\r\n          <div value={\"DELETE\"} className=\"keytile none special\">\r\n                      <button onClick={(e) => handleKeyChange(e)} data={\"DELETE\"} className={`keyboardtile`}>DELETE</button>\r\n                  </div>\r\n      </div>\r\n  </div>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}