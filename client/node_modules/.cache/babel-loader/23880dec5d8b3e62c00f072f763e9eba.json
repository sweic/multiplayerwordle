{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Wrapper.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState, useContext } from 'react';\nimport Board from \"./Board\";\nimport { GameContext } from '../context/GameContext.js';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport JoinRoom from \"./JoinRoom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Wrapper(_ref) {\n  _s();\n\n  let {\n    client\n  } = _ref;\n  const {\n    gameID,\n    gameStatus,\n    setGameStatus,\n    setClientID,\n    setCreateJoin,\n    setGameID,\n    currentName,\n    setCurrentName\n  } = useContext(GameContext);\n  const [wordle, setWordle] = useState(null);\n  const [error, setError] = useState(null);\n  const [players, setPlayers] = useState(null);\n  const [gameEnd, setGameEnd] = useState(false);\n  useEffect(() => {\n    client.onopen = () => {\n      console.log(\"client connected to server\");\n    };\n\n    client.onmessage = message => {\n      const data = JSON.parse(message.data);\n      console.log(data);\n\n      if (data.type == \"initial\") {\n        setClientID(data.clientID);\n        console.log(data.clientID);\n      }\n\n      if (data.type == \"create\") {\n        setGameID(data.gameID);\n        setCreateJoin(\"create\");\n      }\n\n      if (data.type == \"join-error\") {\n        if (data.message == \"full\") {\n          setError('Room is full');\n        } else {\n          setError('Invite code is invalid');\n        }\n      }\n\n      if (data.type == \"join-success\") {\n        setGameID(data.gameID);\n        setError(null);\n      }\n\n      if (data.type == \"start\") {\n        setWordle(data.wordle);\n        setGameID(data.gameID);\n        setPlayers(data.players);\n        setGameStatus(\"connected\");\n      }\n\n      if (data.type == \"winner\") {\n        setGameEnd({\n          status: true,\n          winner: data.winner\n        });\n      }\n    };\n  }, []);\n  useEffect(() => {\n    console.log(\"Reloaded\");\n  }, [gameStatus]);\n\n  const renderSwitch = gameStatus => {\n    switch (gameStatus) {\n      case \"waiting\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Waiting for other player to connect...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this);\n\n      case \"connected\":\n        return /*#__PURE__*/_jsxDEV(Board, {\n          gameID: gameID,\n          client: client,\n          wordle: wordle,\n          players: players,\n          user: currentName,\n          gameEnd: gameEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this);\n\n      case \"none\":\n        return /*#__PURE__*/_jsxDEV(JoinRoom, {\n          error: error,\n          client: client\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderSwitch(gameStatus)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Wrapper, \"25X3XdfdsMynbufhChZ//Qoc6DE=\");\n\n_c = Wrapper;\nexport default Wrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrapper\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Wrapper.js"],"names":["React","useEffect","useState","useContext","Board","GameContext","w3cwebsocket","W3CWebSocket","JoinRoom","Wrapper","client","gameID","gameStatus","setGameStatus","setClientID","setCreateJoin","setGameID","currentName","setCurrentName","wordle","setWordle","error","setError","players","setPlayers","gameEnd","setGameEnd","onopen","console","log","onmessage","message","data","JSON","parse","type","clientID","status","winner","renderSwitch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useEffect, useState, useContext} from 'react';\r\nimport Board from \"./Board\";\r\nimport {GameContext} from '../context/GameContext.js'\r\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\r\nimport JoinRoom from \"./JoinRoom\";\r\nfunction Wrapper({client}) {\r\n    const {gameID, gameStatus, setGameStatus, setClientID, setCreateJoin, setGameID, currentName, setCurrentName} = useContext(GameContext);\r\n    const [wordle, setWordle] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [players, setPlayers] = useState(null)\r\n    const [gameEnd, setGameEnd] = useState(false)\r\n\r\n    useEffect(() => {\r\n        client.onopen = () => {\r\n          console.log(\"client connected to server\");\r\n        }\r\n        client.onmessage = (message) => {\r\n            const data = JSON.parse(message.data);\r\n            console.log(data);\r\n            if (data.type == \"initial\") {\r\n              setClientID(data.clientID)\r\n              console.log(data.clientID);\r\n            }\r\n      \r\n            if (data.type == \"create\") {\r\n              setGameID(data.gameID);\r\n              setCreateJoin(\"create\");\r\n            }\r\n\r\n            if (data.type == \"join-error\") {\r\n                if (data.message == \"full\") {\r\n                    setError('Room is full');\r\n                } else {\r\n                    setError ('Invite code is invalid');\r\n                }\r\n            }\r\n            if (data.type == \"join-success\") {\r\n                setGameID(data.gameID);\r\n                setError(null);\r\n\r\n            }\r\n            if (data.type == \"start\") {\r\n                setWordle(data.wordle)\r\n                setGameID(data.gameID)\r\n                setPlayers(data.players)\r\n                setGameStatus(\"connected\")\r\n                \r\n                \r\n            }\r\n            if (data.type == \"winner\") {\r\n                \r\n                setGameEnd({status: true, winner: data.winner});\r\n            }\r\n          }\r\n        \r\n      }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"Reloaded\")\r\n    }, [gameStatus])\r\n\r\n    const renderSwitch = (gameStatus) => {\r\n        switch(gameStatus) {\r\n            case(\"waiting\"):\r\n                return (<div>Waiting for other player to connect...</div>);\r\n            case(\"connected\"):\r\n                return (<Board gameID={gameID} client={client} wordle={wordle} players={players} user={currentName} gameEnd={gameEnd}></Board>);\r\n            case(\"none\"):\r\n                return (<JoinRoom error={error} client={client}></JoinRoom>)\r\n        }\r\n    }\r\n\r\n\r\n  return <div>{renderSwitch(gameStatus)}</div>\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}