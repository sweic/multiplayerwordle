{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd\n  } = _ref;\n  const [history, setHistory] = useState([]);\n  const [currentRow, setCurrentRow] = useState([]);\n  const [reload, setReload] = useState(0);\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const testRef = useRef(null);\n  var prevRow = [];\n  var prevHistory = [];\n  prevHistory = [];\n  const opponent = players.find(player => player !== user);\n\n  function checkKey(e) {\n    if (prevHistory.length == 6 || gameEnd.status) return;\n\n    if (prevRow.length == 5) {\n      if (e.keyCode == 13) {\n        var word = prevRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            result: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...prevHistory, final]);\n        prevHistory.push(final);\n        setCurrentRow([]);\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true);\n          prevHistory = [];\n          prevRow = [];\n        }\n      } else if (e.keyCode == 8) {\n        const tmp = prevRow.slice(0, prevRow.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp;\n      }\n    } else if (e.keyCode == 8) {\n      const tmp = prevRow.slice(0, prevRow.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp;\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\n      setCurrentRow([...prevRow, e.key]);\n      prevRow.push(e.key);\n    }\n  }\n\n  useEffect(() => {\n    if (gameEnd.status) {\n      console.log(\"lost\");\n      setWinner(false);\n    }\n\n    const idx = Math.floor(Math.random() * 2314 + 1);\n    window.addEventListener('keyup', checkKey);\n    testRef.current.focus();\n    setTimeout(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => {\n      window.removeEventListener('keyup', checkKey);\n    };\n  }, []);\n  useEffect(() => {\n    setHistory([]);\n    setCurrentRow([]);\n    setTimeout(() => {\n      window.addEventListener('keyup', checkKey);\n      testRef.current.focus();\n    }, 100);\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toasty\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: error ? \"toast-container error\" : \"toast-container\",\n        children: \"Not in word list!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner ? \"toast-container error\" : \"toast-container\",\n        children: \"You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner == false ? \"toast-container error\" : \"toast-container\",\n        children: \"You lost!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), user, history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 32\n    }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"currentrow-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n        currentRow: currentRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 70\n      }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n        blankRows: 6 - history.length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 31\n    }, this), \"playing against: \", opponent, /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"fallback-input\",\n      ref: testRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"Q0o9JX0XGXW4fgv8wLEr2O90GKU=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Board","gameID","wordle","client","players","user","gameEnd","history","setHistory","currentRow","setCurrentRow","reload","setReload","error","setError","winner","setWinner","timer","setTimer","testRef","prevRow","prevHistory","opponent","find","player","checkKey","e","length","status","keyCode","word","console","log","includes","join","setTimeout","target","final","i","replace","push","result","every","value","data","type","payload","send","JSON","stringify","tmp","slice","key","idx","Math","floor","random","window","addEventListener","current","focus","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,YAAR,EAAsBC,KAAtB,QAAkC,iBAAlC;;;AACA,SAASC,KAAT,OAAiE;AAAA;;AAAA,MAAlD;AAACC,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,IAAlC;AAAwCC,IAAAA;AAAxC,GAAkD;AAC9D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,CAAD,CAAlC;AAIA,QAAM0B,OAAO,GAAGxB,MAAM,CAAC,IAAD,CAAtB;AAGA,MAAIyB,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACAA,EAAAA,WAAW,GAAG,EAAd;AAEA,QAAMC,QAAQ,GAAGlB,OAAO,CAACmB,IAAR,CAAcC,MAAD,IAAYA,MAAM,KAAKnB,IAApC,CAAjB;;AAEA,WAASoB,QAAT,CAAkBC,CAAlB,EAAqB;AACpB,QAAIL,WAAW,CAACM,MAAZ,IAAsB,CAAtB,IAA2BrB,OAAO,CAACsB,MAAvC,EAAgD;;AAChD,QAAIR,OAAO,CAACO,MAAR,IAAkB,CAAtB,EAAyB;AACrB,UAAID,CAAC,CAACG,OAAF,IAAa,EAAjB,EAAqB;AAEjB,YAAIC,IAAI,GAAGV,OAAX;AAEAW,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,YAAI,CAAChC,YAAY,CAACmC,QAAb,CAAsBH,IAAI,CAACI,IAAL,CAAU,EAAV,CAAtB,CAAD,IAAyC,CAACnC,KAAK,CAACkC,QAAN,CAAeH,IAAI,CAACI,IAAL,CAAU,EAAV,CAAf,CAA9C,EAA6E;AACzEpB,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACAqB,UAAAA,UAAU,CAAC,MAAM;AACbrB,YAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,WAFS,EAEP,IAFO,CAAV;AAGA;AACH;;AACN,YAAIsB,MAAM,GAAGlC,MAAb;AACA,YAAImC,KAAK,GAAG,EAAZ;;AACA,aAAK,IAAIC,CAAT,IAAcR,IAAd,EAAoB;AAChB,cAAIF,MAAM,GAAG,MAAb;;AACA,cAAIE,IAAI,CAACQ,CAAD,CAAJ,IAAWF,MAAM,CAACE,CAAD,CAArB,EAA0B;AACtBV,YAAAA,MAAM,GAAG,OAAT;AACAQ,YAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAeT,IAAI,CAACQ,CAAD,CAAnB,EAAwB,GAAxB,CAAT;AACH,WAHD,MAGO,IAAIF,MAAM,CAACH,QAAP,CAAgBH,IAAI,CAACQ,CAAD,CAApB,CAAJ,EAA8B;AACjCV,YAAAA,MAAM,GAAG,QAAT;AACAQ,YAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAeT,IAAI,CAACQ,CAAD,CAAnB,EAAwB,GAAxB,CAAT;AACH;;AACDD,UAAAA,KAAK,CAACG,IAAN,CAAW;AAACC,YAAAA,MAAM,EAAEX,IAAI,CAACQ,CAAD,CAAb;AAAkBV,YAAAA,MAAM,EAAEA;AAA1B,WAAX;AAEH;;AACDpB,QAAAA,UAAU,CAAC,CAAC,GAAGa,WAAJ,EAAiBgB,KAAjB,CAAD,CAAV;AACAhB,QAAAA,WAAW,CAACmB,IAAZ,CAAiBH,KAAjB;AACA3B,QAAAA,aAAa,CAAC,EAAD,CAAb;AACAU,QAAAA,OAAO,GAAG,EAAV;;AACA,YAAIiB,KAAK,CAACK,KAAN,CAAaC,KAAD,IAAWA,KAAK,CAACf,MAAN,IAAgB,OAAvC,CAAJ,EAAqD;AACpD,gBAAMgB,IAAI,GAAG;AACTC,YAAAA,IAAI,EAAE,QADG;AAETC,YAAAA,OAAO,EAAE;AAAC/B,cAAAA,MAAM,EAAEV,IAAT;AACTJ,cAAAA,MAAM,EAAEA;AADC;AAFA,WAAb;AAKAE,UAAAA,MAAM,CAAC4C,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAZ;AACA5B,UAAAA,SAAS,CAAC,IAAD,CAAT;AACAK,UAAAA,WAAW,GAAG,EAAd;AACAD,UAAAA,OAAO,GAAG,EAAV;AAEF;AACG,OA1CD,MA2CK,IAAIM,CAAC,CAACG,OAAF,IAAa,CAAjB,EAAoB;AACrB,cAAMqB,GAAG,GAAG9B,OAAO,CAAC+B,KAAR,CAAc,CAAd,EAAiB/B,OAAO,CAACO,MAAR,GAAiB,CAAlC,CAAZ;AACAjB,QAAAA,aAAa,CAACwC,GAAD,CAAb;AACA9B,QAAAA,OAAO,GAAG8B,GAAV;AAEH;AACJ,KAlDD,MAkDO,IAAIxB,CAAC,CAACG,OAAF,IAAa,CAAjB,EAAoB;AACvB,YAAMqB,GAAG,GAAG9B,OAAO,CAAC+B,KAAR,CAAc,CAAd,EAAiB/B,OAAO,CAACO,MAAR,GAAiB,CAAlC,CAAZ;AACAjB,MAAAA,aAAa,CAACwC,GAAD,CAAb;AACA9B,MAAAA,OAAO,GAAG8B,GAAV;AAGH,KANM,MAMA,IAAIxB,CAAC,CAACG,OAAF,IAAa,EAAb,IAAmBH,CAAC,CAACG,OAAF,IAAa,EAApC,EAAwC;AAC3CnB,MAAAA,aAAa,CAAC,CAAC,GAAGU,OAAJ,EAAaM,CAAC,CAAC0B,GAAf,CAAD,CAAb;AACAhC,MAAAA,OAAO,CAACoB,IAAR,CAAad,CAAC,CAAC0B,GAAf;AAEH;AACJ;;AACG1D,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,OAAO,CAACsB,MAAZ,EAAoB;AAChBG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAhB,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH;;AACD,UAAMqC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,IAAjB,GAAyB,CAApC,CAAZ;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCjC,QAAjC;AACAN,IAAAA,OAAO,CAACwC,OAAR,CAAgBC,KAAhB;AACAzB,IAAAA,UAAU,CAAC,MAAM;AACbjB,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGA,WAAO,MAAM;AACTwC,MAAAA,MAAM,CAACI,mBAAP,CAA2B,OAA3B,EAAoCpC,QAApC;AACH,KAFD;AAMH,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA/B,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAyB,IAAAA,UAAU,CAAC,MAAM;AACbsB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCjC,QAAjC;AACAN,MAAAA,OAAO,CAACwC,OAAR,CAAgBC,KAAhB;AACH,KAHS,EAGP,GAHO,CAAV;AAIH,GAPQ,EAON,CAACjD,MAAD,CAPM,CAAT;AAUF,sBAAQ;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACJ;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACA;AAAK,QAAA,SAAS,EAAEE,KAAK,GAAG,uBAAH,GAA6B,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAEE,MAAM,GAAG,uBAAH,GAA6B,iBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAK,QAAA,SAAS,EAAEA,MAAM,IAAI,KAAV,GAAkB,uBAAlB,GAA4C,iBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YADI,EAQHV,IARG,EASDE,OAAO,CAACoB,MAAR,GAAiB,CAAjB,iBAAsB,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEpB;AAArB;AAAA;AAAA;AAAA;AAAA,YATrB,EAUFA,OAAO,CAACoB,MAAR,GAAiB,CAAjB,iBAAsB;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,mCAAuC,QAAC,UAAD;AAAY,QAAA,UAAU,EAAElB;AAAxB;AAAA;AAAA;AAAA;AAAA,cAAvC,eACtB,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,IAAIF,OAAO,CAACoB,MAAZ,GAAqB;AAA3C;AAAA;AAAA;AAAA;AAAA,cADsB;AAAA;AAAA;AAAA;AAAA;AAAA,YAVpB,uBAYgBL,QAZhB,eAeJ;AAAO,MAAA,SAAS,EAAC,gBAAjB;AAAkC,MAAA,GAAG,EAAEH;AAAvC;AAAA;AAAA;AAAA;AAAA,YAfI;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAkBD;;GAlIQnB,K;;KAAAA,K;AAoIT,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nfunction Board({gameID, wordle, client, players, user, gameEnd}) {\r\n   const [history, setHistory] = useState([])\r\n   const [currentRow, setCurrentRow] = useState([]);\r\n   const [reload, setReload] = useState(0)\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [timer, setTimer] = useState(0)\r\n   \r\n   \r\n  \r\n   const testRef = useRef(null)\r\n\r\n   \r\n   var prevRow = []\r\n   var prevHistory = []\r\n   prevHistory = [];\r\n\r\n   const opponent = players.find((player) => player !== user)\r\n\r\n   function checkKey(e) {\r\n    if (prevHistory.length == 6 || gameEnd.status ) return;\r\n    if (prevRow.length == 5) {\r\n        if (e.keyCode == 13) {\r\n            \r\n            var word = prevRow\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({result: word[i], status: status});\r\n          \r\n       }\r\n       setHistory([...prevHistory, final])\r\n       prevHistory.push(final)\r\n       setCurrentRow([])\r\n       prevRow = []\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        const data = {\r\n            type: \"winner\",\r\n            payload: {winner: user,\r\n            gameID: gameID}\r\n        }\r\n        client.send(JSON.stringify(data));\r\n        setWinner(true);\r\n        prevHistory = [];\r\n        prevRow = [];\r\n       \r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        setCurrentRow(tmp)\r\n        prevRow = tmp;\r\n     \r\n            \r\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n        setCurrentRow([...prevRow, e.key])\r\n        prevRow.push(e.key)\r\n       \r\n    }\r\n}\r\n    useEffect(() => {\r\n        if (gameEnd.status) {\r\n            console.log(\"lost\");\r\n            setWinner(false);\r\n        }\r\n        const idx = Math.floor((Math.random() * 2314) + 1);\r\n        window.addEventListener('keyup', checkKey);\r\n        testRef.current.focus()\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n        return () => {\r\n            window.removeEventListener('keyup', checkKey);\r\n        }\r\n\r\n        \r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setHistory([])\r\n        setCurrentRow([])\r\n        setTimeout(() => {\r\n            window.addEventListener('keyup', checkKey);\r\n            testRef.current.focus()\r\n        }, 100)\r\n    }, [reload])\r\n\r\n\r\n  return (<div className=\"board-container\">\r\n      <div className=\"toasty\">\r\n      <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n      <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n      <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>\r\n      </div>\r\n     \r\n   \r\n      {user}\r\n        {history.length > 0 && <HistoryRow history={history}></HistoryRow>}\r\n       {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRow}></CurrentRow>\r\n        <BlankRows blankRows={6 - history.length - 1}></BlankRows></div>}\r\n        playing against: {opponent}\r\n \r\n     \r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}