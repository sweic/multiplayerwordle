{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID\n  } = _ref;\n  const [history, setHistory] = useState([]);\n  const [currentRow, setCurrentRow] = useState([]);\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const testRef = useRef(null);\n  console.log(clientID);\n  var prevRow = [];\n  var prevHistory = [];\n  prevHistory = [];\n  const opponent = players.find(player => player !== user);\n\n  function checkKey(e) {\n    console.log(gameEnd.status);\n    if (prevHistory.length == 6 || gameEnd.status) return;\n\n    if (prevRow.length == 5) {\n      if (e.keyCode == 13) {\n        var word = prevRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            result: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...prevHistory, final]);\n        prevHistory.push(final);\n        client.send(JSON.stringify({\n          type: \"update\",\n          rows: prevHistory,\n          clientID: clientID,\n          gameID: gameID\n        }));\n        setCurrentRow([]);\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true);\n          prevHistory = [];\n          prevRow = [];\n        }\n      } else if (e.keyCode == 8) {\n        const tmp = prevRow.slice(0, prevRow.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp;\n      }\n    } else if (e.keyCode == 8) {\n      const tmp = prevRow.slice(0, prevRow.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp;\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\n      setCurrentRow([...prevRow, e.key]);\n      prevRow.push(e.key);\n    }\n  }\n\n  useEffect(() => {\n    console.log(\"did this\");\n    window.addEventListener('keyup', checkKey);\n    testRef.current.focus();\n    setTimeout(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => {\n      window.removeEventListener('keyup', checkKey);\n    };\n  }, []);\n  useEffect(() => {\n    if (gameEnd.status) {\n      window.addEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n\n      if (gameEnd.winner == user) {\n        setWinner(true);\n        window.removeEventListener('keyup', checkKey);\n      } else {\n        setWinner(false);\n        window.removeEventListener('keyup', checkKey);\n      }\n    }\n\n    return () => {\n      window.removeEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n    };\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toasty\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: error ? \"toast-container error\" : \"toast-container\",\n        children: \"Not in word list!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner ? \"toast-container error\" : \"toast-container\",\n        children: \"You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner == false ? \"toast-container error\" : \"toast-container\",\n        children: \"You lost!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), user, history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n      history: history,\n      opponent: \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 32\n    }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"currentrow-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n        currentRow: currentRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 70\n      }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n        opponent: \"false\",\n        blankRows: 6 - history.length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 31\n    }, this), \"playing aagainst: \", opponent, /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"fallback-input\",\n      ref: testRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"8/828bTRejcnkdVExZsD7mBVqTo=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","history","setHistory","currentRow","setCurrentRow","error","setError","winner","setWinner","timer","setTimer","testRef","console","log","prevRow","prevHistory","opponent","find","player","checkKey","e","status","length","keyCode","word","includes","join","setTimeout","target","final","i","replace","push","result","send","JSON","stringify","type","rows","every","value","data","payload","tmp","slice","key","window","addEventListener","current","focus","removeEventListener","event","stopImmediatePropagation"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID}) {\r\n   const [history, setHistory] = useState([])\r\n   const [currentRow, setCurrentRow] = useState([]);\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [timer, setTimer] = useState(0)\r\n   \r\n   const testRef = useRef(null)\r\n\r\n   console.log(clientID);\r\n   var prevRow = []\r\n   var prevHistory = []\r\n   prevHistory = [];\r\n\r\n   const opponent = players.find((player) => player !== user)\r\n\r\n   function checkKey(e) {\r\n       console.log(gameEnd.status);\r\n    if (prevHistory.length == 6 || gameEnd.status ) return;\r\n    if (prevRow.length == 5) {\r\n        if (e.keyCode == 13) {\r\n            \r\n            var word = prevRow\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({result: word[i], status: status});\r\n          \r\n       }\r\n       setHistory([...prevHistory, final])\r\n       prevHistory.push(final)\r\n       client.send(JSON.stringify({type: \"update\", rows: prevHistory, clientID: clientID, gameID: gameID}));\r\n       setCurrentRow([])\r\n       prevRow = []\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        const data = {\r\n            type: \"winner\",\r\n            payload: {\r\n                winner: user,\r\n                gameID: gameID\r\n                }\r\n        }\r\n        client.send(JSON.stringify(data));\r\n        setWinner(true);\r\n        prevHistory = [];\r\n        prevRow = [];\r\n       \r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        setCurrentRow(tmp)\r\n        prevRow = tmp;\r\n     \r\n            \r\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n        setCurrentRow([...prevRow, e.key])\r\n        prevRow.push(e.key)\r\n       \r\n    }\r\n}\r\n    useEffect(() => {\r\n        console.log(\"did this\");\r\n        window.addEventListener('keyup', checkKey);\r\n        testRef.current.focus()\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n        return () => {\r\n            window.removeEventListener('keyup', checkKey);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        if (gameEnd.status) {\r\n            window.addEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n                window.removeEventListener('keyup', checkKey);\r\n                \r\n            } else {\r\n                setWinner(false);\r\n                window.removeEventListener('keyup', checkKey);\r\n            }\r\n        }\r\n        return () => {\r\n            window.removeEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n        }\r\n\r\n    }, [reload])\r\n\r\n    \r\n\r\n\r\n  return (<div className=\"board-container\">\r\n      <div className=\"toasty\">\r\n      <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n      <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n      <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>\r\n      </div>\r\n     \r\n   \r\n      {user}\r\n        {history.length > 0 && <HistoryRow history={history} opponent={\"false\"}></HistoryRow>}\r\n       {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRow}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - history.length - 1}></BlankRows></div>}\r\n        playing aagainst: {opponent}\r\n \r\n     \r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}