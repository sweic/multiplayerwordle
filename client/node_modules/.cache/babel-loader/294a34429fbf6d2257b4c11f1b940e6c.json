{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef, useReducer, useCallback } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport Opponent from \"./Opponent\";\nimport Keyboard from \"./Keyboard\";\nimport { keyrow1, keyrow2, keyrow3 } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"mounted board\");\nconst keyrowone = [{\n  key: 'q',\n  status: 'none'\n}, {\n  key: 'w',\n  status: 'none'\n}, {\n  key: 'e',\n  status: 'none'\n}, {\n  key: 'r',\n  status: 'none'\n}, {\n  key: 't',\n  status: 'none'\n}, {\n  key: 'y',\n  status: 'none'\n}, {\n  key: 'u',\n  status: 'none'\n}, {\n  key: 'i',\n  status: 'none'\n}, {\n  key: 'o',\n  status: 'none'\n}, {\n  key: 'p',\n  status: 'none'\n}];\nconst keyrowtwo = [{\n  key: 'a',\n  status: 'none'\n}, {\n  key: 's',\n  status: 'none'\n}, {\n  key: 'd',\n  status: 'none'\n}, {\n  key: 'f',\n  status: 'none'\n}, {\n  key: 'g',\n  status: 'none'\n}, {\n  key: 'h',\n  status: 'none'\n}, {\n  key: 'j',\n  status: 'none'\n}, {\n  key: 'k',\n  status: 'none'\n}, {\n  key: 'l',\n  status: 'none'\n}];\nconst keyrowthree = [{\n  key: 'z',\n  status: 'none'\n}, {\n  key: 'x',\n  status: 'none'\n}, {\n  key: 'c',\n  status: 'none'\n}, {\n  key: 'v',\n  status: 'none'\n}, {\n  key: 'b',\n  status: 'none'\n}, {\n  key: 'n',\n  status: 'none'\n}, {\n  key: 'm',\n  status: 'none'\n}];\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    gameID,\n    wordle,\n    client,\n    players,\n    user,\n    gameEnd,\n    reload,\n    clientID,\n    opponentData,\n    keysa\n  } = _ref;\n  console.log(\"remounted\");\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [currentRow, _setCurrentRow] = useState([]);\n  const [history, _setHistory] = useState([]);\n  const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3]);\n  const [rematch, setRematch] = useState(false);\n  const [gameStatus, _setGameStatus] = useState(gameEnd.status);\n  const gameStatusRef = useRef(gameEnd.status);\n  const currentRowRef = useRef(currentRow);\n  const historyRef = useRef(history);\n  const testRef = useRef(null);\n\n  const setHistory = x => {\n    historyRef.current = x;\n\n    _setHistory(x);\n  };\n\n  const setCurrentRow = x => {\n    currentRowRef.current = x;\n\n    _setCurrentRow(x);\n  };\n\n  const setGameStatus = x => {\n    gameStatusRef.current = x;\n\n    _setGameStatus(x);\n  }; //    const [state, dispatch] = useReducer(reducer, initialState);\n  //    const {currentRow, history} = state\n\n\n  useEffect(() => {\n    console.log(\"did this\");\n    setHistory([]);\n    setCurrentRow([]);\n    setWinner(null);\n    const initKeys = [keyrow1, keyrow2, keyrow3];\n    setKeyboard(initKeys);\n    window.addEventListener('keyup', checkKey);\n    testRef.current.focus();\n    return () => {\n      window.removeEventListener('keyup', checkKey);\n    };\n  }, [wordle]);\n  useEffect(() => {\n    console.log(\"init keyboard\");\n    console.log(history);\n\n    if (history.length > 0) {\n      console.log(\"changing keys\");\n      var initKeys = [keyrow1, keyrow2, keyrow3];\n\n      for (var a in history) {\n        for (var c in history[a]) {\n          console.log(history[a][c]);\n          var flag = false;\n          if (flag) break;else {\n            for (const j in initKeys) {\n              for (var b in initKeys[j]) {\n                if (history[a][c].key == initKeys[j][b].key) {\n                  initKeys[j][b].status = history[a][c].status;\n                  flag = true;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      setKeyboard(initKeys);\n    }\n  }, [history]);\n  console.log(clientID);\n  var prevRow = [];\n  var prevHistory = [];\n  prevHistory = [];\n\n  const handleRematch = e => {\n    e.preventDefault();\n    const data = {\n      type: \"rematch\",\n      payload: {\n        gameID: gameID,\n        clientID: clientID\n      }\n    };\n    client.send(JSON.stringify(data));\n    setRematch(false);\n    const initKeys = [keyrow1, keyrow2, keyrow3, [Math.random()]];\n    setKeyboard(initKeys);\n  };\n\n  function checkKey(e) {\n    console.log(prevRow);\n    if (historyRef.current.length == 6 || gameEnd.status) return;\n    console.log(e.keyCode);\n\n    if (currentRowRef.current.length == 5) {\n      if (e.keyCode == 13) {\n        console.log(\"entered\");\n        var word = currentRowRef.current;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            key: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...historyRef.current, final]);\n        setCurrentRow([]);\n        prevHistory.push(final); //    dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\n\n        client.send(JSON.stringify({\n          type: \"update\",\n          payload: {\n            rows: historyRef.current,\n            clientID: clientID,\n            gameID: gameID\n          }\n        })); //    setCurrentRow([])\n\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true);\n          setRematch(true); // prevHistory = [];\n          // prevRow = [];\n        }\n      } else if (e.keyCode == 8) {\n        const tmp = prevRow.slice(0, prevRow.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp; // dispatch({type: actionTypes.TYPE_BACKSPACE})\n      }\n    } else if (e.keyCode == 8) {\n      const tmp = prevRow.slice(0, prevRow.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp; // dispatch({type: actionTypes.TYPE_BACKSPACE})\n    } else if (currentRowRef.current.length < 5) {\n      if (e.keyCode >= 65 && e.keyCode <= 90) {\n        setCurrentRow([...currentRowRef.current, e.key]);\n        prevRow.push(e.key); // dispatch({type: actionTypes.TYPE_LETTER, payload: e.key});\n      }\n    }\n  }\n\n  const handleKeyChange = d => {\n    console.log(prevRow);\n    prevRow = currentRow;\n    prevHistory = history;\n    d.preventDefault();\n    const key = d.target.getAttribute(\"data\");\n    const e = d.target.getAttribute(\"data\").charCodeAt(0);\n    console.log(e);\n    if (historyRef.current.length == 6 || gameEnd.status) return;\n\n    if (currentRowRef.current.length == 5) {\n      if (e == 69) {\n        var word = prevRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            key: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...historyRef.current, final]);\n        client.send(JSON.stringify({\n          type: \"update\",\n          payload: {\n            rows: prevHistory,\n            clientID: clientID,\n            gameID: gameID\n          }\n        }));\n        setCurrentRow([]);\n\n        if (final.every(value => value.status == \"green\")) {\n          const data = {\n            type: \"winner\",\n            payload: {\n              winner: user,\n              gameID: gameID\n            }\n          };\n          client.send(JSON.stringify(data));\n          setWinner(true);\n          setRematch(true);\n          prevHistory = [];\n          prevRow = [];\n        }\n      } else if (e == 68) {\n        const tmp = prevRow.slice(0, currentRowRef.current.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp;\n      }\n    } else if (e == 68) {\n      const tmp = prevRow.slice(0, currentRowRef.current.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp;\n    } else if (e >= 97 && e <= 122) {\n      setCurrentRow([...currentRowRef.current, key]);\n      prevRow.push(key);\n    }\n  };\n\n  useEffect(() => {\n    setGameStatus(false);\n    console.log(keyrowone);\n    const newKeys = [keyrowone, keyrowtwo, keyrowthree];\n    setKeyboard([...newKeys]);\n    setTimeout(() => {\n      setKeyboard([...keysa, [Math.random()]]);\n    }, 100);\n\n    if (gameEnd.status) {\n      window.addEventListener('keyup', function (event) {\n        if (gameStatusRef.current) {\n          console.log(\"ineffect\");\n          console.log(gameStatusRef.current);\n          event.stopImmediatePropagation();\n        }\n      }, true);\n\n      if (gameEnd.winner == user) {\n        setWinner(true);\n        setRematch(true);\n        window.removeEventListener('keyup', checkKey);\n      } else {\n        setWinner(false);\n        setRematch(true);\n        window.removeEventListener('keyup', checkKey);\n      }\n    } else {\n      window.removeEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n    }\n\n    return () => {\n      window.removeEventListener('keyup', function (event) {\n        event.stopImmediatePropagation();\n      }, true);\n    };\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(Opponent, {\n      opponentData: opponentData,\n      opponent: players.find(player => player !== user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toasty\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: error ? \"toast-container error\" : \"toast-container\",\n          children: \"Not in word list!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner ? \"toast-container error\" : \"toast-container\",\n          children: \"You won!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: winner == false ? \"toast-container error\" : \"toast-container\",\n          children: \"You lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => handleRematch(e),\n          className: rematch ? \"toast-container rematch\" : \"toast-container\",\n          children: \"Rematch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n        history: historyRef.current,\n        opponent: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 32\n      }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentrow-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n          currentRow: currentRowRef.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n          opponent: \"false\",\n          blankRows: 6 - historyRef.current.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"fallback-input\",\n        ref: testRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow one\",\n        children: keyboard[0].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow two\",\n        children: keyboard[1].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyrow three\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keytile none special\",\n          value: \"ENTER\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: \"ENTER\",\n            className: `keyboardtile`,\n            children: \"ENTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), keyboard[2].map(key => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: key.key,\n            className: `keytile ${key.status}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleKeyChange(e),\n              data: key.key,\n              className: `keyboardtile ${key.status}`,\n              children: key.key.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 21\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"DELETE\",\n          className: \"keytile none special\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => handleKeyChange(e),\n            data: \"DELETE\",\n            className: `keyboardtile`,\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"Zwrt41Mg5Z2eWLGPNG70ljCBN5E=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","useReducer","useCallback","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Opponent","Keyboard","keyrow1","keyrow2","keyrow3","console","log","keyrowone","key","status","keyrowtwo","keyrowthree","Board","gameID","wordle","client","players","user","gameEnd","reload","clientID","opponentData","keysa","error","setError","winner","setWinner","currentRow","_setCurrentRow","history","_setHistory","keyboard","setKeyboard","rematch","setRematch","gameStatus","_setGameStatus","gameStatusRef","currentRowRef","historyRef","testRef","setHistory","x","current","setCurrentRow","setGameStatus","initKeys","window","addEventListener","checkKey","focus","removeEventListener","length","a","c","flag","j","b","prevRow","prevHistory","handleRematch","e","preventDefault","data","type","payload","send","JSON","stringify","Math","random","keyCode","word","includes","join","setTimeout","target","final","i","replace","push","rows","every","value","tmp","slice","handleKeyChange","d","getAttribute","charCodeAt","newKeys","event","stopImmediatePropagation","find","player","map","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef, useReducer, useCallback} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nimport Opponent from \"./Opponent\";\r\nimport Keyboard from \"./Keyboard\";\r\nimport {keyrow1, keyrow2, keyrow3} from '../constants.js';\r\nconsole.log(\"mounted board\");\r\n const keyrowone = [\r\n    {key: 'q', status: 'none'},\r\n    {key: 'w', status: 'none'},\r\n    {key: 'e', status: 'none'},\r\n    {key: 'r', status: 'none'},\r\n    {key: 't', status: 'none'},\r\n    {key: 'y', status: 'none'},\r\n    {key: 'u', status: 'none'},\r\n    {key: 'i', status: 'none'},\r\n    {key: 'o', status: 'none'},\r\n    {key: 'p', status: 'none'},\r\n  ]\r\n   const keyrowtwo = [\r\n    {key: 'a', status: 'none'},\r\n    {key: 's', status: 'none'},\r\n    {key: 'd', status: 'none'},\r\n    {key: 'f', status: 'none'},\r\n    {key: 'g', status: 'none'},\r\n    {key: 'h', status: 'none'},\r\n    {key: 'j', status: 'none'},\r\n    {key: 'k', status: 'none'},\r\n    {key: 'l', status: 'none'},\r\n  ]\r\n   const keyrowthree = [\r\n    {key: 'z', status: 'none'},\r\n    {key: 'x', status: 'none'},\r\n    {key: 'c', status: 'none'},\r\n    {key: 'v', status: 'none'},\r\n    {key: 'b', status: 'none'},\r\n    {key: 'n', status: 'none'},\r\n    {key: 'm', status: 'none'},\r\n  ]\r\nfunction Board({gameID, wordle, client, players, user, gameEnd, reload, clientID, opponentData, keysa}) {\r\n   console.log(\"remounted\");\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(null);\r\n   const [currentRow, _setCurrentRow] = useState([])\r\n   const [history, _setHistory] = useState([])\r\n   const [keyboard, setKeyboard] = useState([keyrow1, keyrow2, keyrow3])\r\n   const [rematch, setRematch] = useState(false);\r\n   const [gameStatus, _setGameStatus] = useState(gameEnd.status);\r\n   const gameStatusRef = useRef(gameEnd.status)\r\n   const currentRowRef = useRef(currentRow)\r\n   const historyRef = useRef(history);\r\n   const testRef = useRef(null)\r\n\r\n   const setHistory = x => {\r\n       historyRef.current = x;\r\n       _setHistory(x);\r\n   }\r\n   const setCurrentRow = x => {\r\n       currentRowRef.current = x;\r\n       _setCurrentRow(x);\r\n   }\r\n\r\n   const setGameStatus = x => {\r\n        gameStatusRef.current = x;\r\n        _setGameStatus(x);\r\n   }\r\n\r\n//    const [state, dispatch] = useReducer(reducer, initialState);\r\n//    const {currentRow, history} = state\r\n\r\n\r\n\r\nuseEffect(() => {\r\n    console.log(\"did this\");\r\n    setHistory([])\r\n    setCurrentRow([]);\r\n    setWinner(null);\r\n    \r\n    const initKeys = [keyrow1, keyrow2, keyrow3];\r\n    setKeyboard(initKeys);\r\n    window.addEventListener('keyup', checkKey);\r\n    testRef.current.focus()\r\n    return () => {\r\n        window.removeEventListener('keyup', checkKey)\r\n    }\r\n}, [wordle])\r\n   useEffect(() => {\r\n       console.log(\"init keyboard\");\r\n       console.log(history);\r\n    if (history.length > 0) {\r\n        console.log(\"changing keys\");\r\n        var initKeys = [keyrow1, keyrow2, keyrow3];\r\n    for (var a in history) {\r\n        \r\n        for (var c in history[a]) {\r\n            console.log(history[a][c]);\r\n            var flag = false\r\n            if (flag) break;\r\n            else {\r\n                for (const j in initKeys) {\r\n                    for (var b in initKeys[j]) {\r\n                        if (history[a][c].key == initKeys[j][b].key) {\r\n                            initKeys[j][b].status = history[a][c].status\r\n                            flag = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n    setKeyboard(initKeys)\r\n\r\n    }\r\n    \r\n}, [history])\r\n   \r\n\r\n   console.log(clientID);\r\n   var prevRow = []\r\n   var prevHistory = []\r\n   prevHistory = [];\r\n\r\n   const handleRematch = e => {\r\n       e.preventDefault();\r\n       const data = {\r\n           type: \"rematch\",\r\n           payload: {\r\n                gameID: gameID,\r\n                clientID: clientID,\r\n           }\r\n           \r\n       }\r\n       client.send(JSON.stringify(data));\r\n       setRematch(false);\r\n       const initKeys = [keyrow1, keyrow2, keyrow3, [Math.random()]]\r\n       setKeyboard(initKeys);\r\n       \r\n   }\r\n   \r\n   \r\n   function checkKey(e) {\r\n    console.log(prevRow);\r\n    if (historyRef.current.length == 6 || gameEnd.status ) return;\r\n    console.log(e.keyCode);\r\n\r\n    \r\n    if (currentRowRef.current.length == 5) {\r\n        \r\n        if (e.keyCode == 13) {\r\n            console.log(\"entered\");\r\n            var word = currentRowRef.current\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({key: word[i], status: status});\r\n          \r\n       }\r\n       setHistory([...historyRef.current, final])\r\n       setCurrentRow([])\r\n       prevHistory.push(final)\r\n    //    dispatch({type: actionTypes.ACCEPT_RESPONSE, payload: final})\r\n       client.send(JSON.stringify({type: \"update\", payload: {rows: historyRef.current, clientID: clientID, gameID: gameID}}));\r\n    //    setCurrentRow([])\r\n       prevRow = []\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        const data = {\r\n            type: \"winner\",\r\n            payload: {\r\n                winner: user,\r\n                gameID: gameID\r\n                }\r\n        }\r\n        client.send(JSON.stringify(data));\r\n        setWinner(true);\r\n        setRematch(true);\r\n        // prevHistory = [];\r\n        // prevRow = [];\r\n       \r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n            // dispatch({type: actionTypes.TYPE_BACKSPACE})\r\n\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        setCurrentRow(tmp)\r\n        prevRow = tmp;\r\n        // dispatch({type: actionTypes.TYPE_BACKSPACE})\r\n     \r\n            \r\n    } else if (currentRowRef.current.length < 5) {\r\n        if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n            setCurrentRow([...currentRowRef.current, e.key])\r\n            prevRow.push(e.key)\r\n            // dispatch({type: actionTypes.TYPE_LETTER, payload: e.key});\r\n           \r\n        }\r\n\r\n    }\r\n}\r\n\r\n    const handleKeyChange = (d) => {\r\n        console.log(prevRow);\r\n        prevRow = currentRow;\r\n        prevHistory = history;\r\n        d.preventDefault();\r\n        const key = d.target.getAttribute(\"data\")\r\n        const e = d.target.getAttribute(\"data\").charCodeAt(0);\r\n        console.log(e);\r\n        if (historyRef.current.length == 6 || gameEnd.status) return;\r\n\r\n        if (currentRowRef.current.length == 5) {\r\n            if (e == 69) {\r\n                \r\n                var word = prevRow\r\n    \r\n                console.log(word);\r\n                if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                    setError(true);\r\n                    setTimeout(() => {\r\n                        setError(false)\r\n                    }, 2000)\r\n                    return \r\n                }\r\n           var target = wordle;\r\n           var final = []\r\n           for (var i in word) {\r\n               var status = \"gray\"\r\n               if (word[i] == target[i]) {\r\n                   status = \"green\"\r\n                   target = target.replace(word[i], \" \")\r\n               } else if (target.includes(word[i])) {\r\n                   status = \"yellow\"\r\n                   target = target.replace(word[i], \" \")\r\n               } \r\n               final.push({key: word[i], status: status});\r\n              \r\n           }\r\n           setHistory([...historyRef.current , final])\r\n           client.send(JSON.stringify({type: \"update\", payload: {rows: prevHistory, clientID: clientID, gameID: gameID}}));\r\n           setCurrentRow([])\r\n           if (final.every((value) => value.status == \"green\")) {\r\n            const data = {\r\n                type: \"winner\",\r\n                payload: {\r\n                    winner: user,\r\n                    gameID: gameID\r\n                    }\r\n            }\r\n            client.send(JSON.stringify(data));\r\n            setWinner(true);\r\n            setRematch(true);\r\n            prevHistory = [];\r\n            prevRow = [];\r\n           \r\n         }\r\n            } \r\n            else if (e == 68) {\r\n                const tmp = prevRow.slice(0, currentRowRef.current.length - 1)\r\n                setCurrentRow(tmp)\r\n                prevRow = tmp;\r\n    \r\n            }\r\n        } else if (e == 68) {\r\n            const tmp = prevRow.slice(0, currentRowRef.current.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n         \r\n                \r\n        } else if (e >= 97 && e <= 122) {\r\n            setCurrentRow([...currentRowRef.current, key])\r\n            prevRow.push(key)\r\n           \r\n        }\r\n\r\n\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        setGameStatus(false);\r\n        console.log(keyrowone);\r\n        const newKeys = [keyrowone, keyrowtwo, keyrowthree];\r\n        setKeyboard([...newKeys]);\r\n        setTimeout(() => {\r\n            setKeyboard([...keysa, [Math.random()]])\r\n        }, 100)\r\n        if (gameEnd.status) {\r\n            window.addEventListener('keyup', function(event) {\r\n                if (gameStatusRef.current) {\r\n                    console.log(\"ineffect\");\r\n                    console.log(gameStatusRef.current);\r\n                    event.stopImmediatePropagation();\r\n                }\r\n               \r\n            }, true);\r\n            if (gameEnd.winner == user) {\r\n                setWinner(true)\r\n                setRematch(true);\r\n                window.removeEventListener('keyup', checkKey);\r\n                \r\n            } else {\r\n                setWinner(false);\r\n                setRematch(true);\r\n                window.removeEventListener('keyup', checkKey);\r\n            }\r\n        } else {\r\n            window.removeEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n        }\r\n        return () => {\r\n            window.removeEventListener('keyup', function(event) {\r\n                event.stopImmediatePropagation();\r\n            }, true);\r\n        }\r\n\r\n    }, [reload])\r\n\r\n    \r\n\r\n\r\n  return (<div className=\"board-container\">\r\n    <Opponent opponentData={opponentData} opponent={players.find((player) => player !== user)}></Opponent>\r\n    <div className=\"user-container\">\r\n        <div className=\"toasty\">\r\n            <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n            <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n            <div className={winner == false ? \"toast-container error\" : \"toast-container\"}>You lost!</div>\r\n            <div onClick={(e) => handleRematch(e)}className={rematch ? \"toast-container rematch\" : \"toast-container\"}>Rematch</div>\r\n        </div>\r\n      <p>{user}</p>\r\n        {history.length > 0 && <HistoryRow history={historyRef.current} opponent={\"false\"}></HistoryRow>}\r\n        {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRowRef.current}></CurrentRow>\r\n        <BlankRows opponent={\"false\"} blankRows={6 - historyRef.current.length - 1}></BlankRows></div>}\r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n      </div> \r\n    <div className=\"keyboard\">\r\n        <div className=\"keyrow one\">\r\n            {keyboard[0].map((key) => {\r\n                return (\r\n                    <div  value={key.key} className={`keytile ${key.status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow two\">\r\n            {keyboard[1].map((key) => {\r\n                return (\r\n                    <div  value={key.key} className={`keytile ${key.status}`}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <div className=\"keyrow three\">\r\n            <div className=\"keytile none special\"  value={\"ENTER\"}>\r\n                        <button onClick={(e) => handleKeyChange(e)} data={\"ENTER\"} className={`keyboardtile`}>ENTER</button>\r\n                    </div>\r\n            {keyboard[2].map((key) => {\r\n                \r\n                return (\r\n                    <div value={key.key}  className={`keytile ${key.status}`}>\r\n                        <button  onClick={(e) => handleKeyChange(e)} data={key.key} className={`keyboardtile ${key.status}`}>{key.key.toUpperCase()}</button>\r\n                    </div>\r\n                )\r\n            })}\r\n            <div value={\"DELETE\"} className=\"keytile none special\">\r\n            <button onClick={(e) => handleKeyChange(e)} data={\"DELETE\"} className={`keyboardtile`}>DELETE</button>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}