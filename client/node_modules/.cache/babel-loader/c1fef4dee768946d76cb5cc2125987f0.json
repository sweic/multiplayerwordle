{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Wrapper.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState, useContext } from 'react';\nimport Board from \"./Board\";\nimport { GameContext } from '../context/GameContext.js';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport JoinRoom from \"./JoinRoom\";\nimport Opponent from \"./Opponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Wrapper(_ref) {\n  _s();\n\n  let {\n    client\n  } = _ref;\n  const {\n    clientID,\n    gameID,\n    gameStatus,\n    setGameStatus,\n    setClientID,\n    setCreateJoin,\n    setGameID,\n    currentName\n  } = useContext(GameContext);\n  const [wordle, setWordle] = useState(null);\n  const [error, setError] = useState(null);\n  const [players, setPlayers] = useState(null);\n  const [gameEnd, setGameEnd] = useState(false);\n  const [reload, setReload] = useState(0);\n  const [opponentData, setOpponentData] = useState([]);\n  useEffect(() => {\n    client.onopen = () => {\n      console.log(\"client connected to server\");\n    };\n\n    client.onmessage = message => {\n      const data = JSON.parse(message.data);\n      console.log(data);\n\n      if (data.type == \"initial\") {\n        setClientID(data.clientID);\n        console.log(data.clientID);\n      }\n\n      if (data.type == \"create\") {\n        setGameID(data.gameID);\n        setCreateJoin(\"create\");\n      }\n\n      if (data.type == \"join-error\") {\n        if (data.message == \"full\") {\n          setError('Room is full');\n        } else {\n          setError('Invite code is invalid');\n        }\n      }\n\n      if (data.type == \"join-success\") {\n        setGameID(data.gameID);\n        setError(null);\n      }\n\n      if (data.type == \"start\") {\n        setWordle(data.wordle);\n        setGameID(data.gameID);\n        setPlayers(data.players);\n        setGameStatus(\"connected\");\n      }\n\n      if (data.type == \"winner\") {\n        setGameEnd({\n          status: true,\n          winner: data.winner\n        });\n        setReload(reload + 1);\n      }\n\n      if (data.type == \"update\") {\n        setOpponentData(data.rows);\n      }\n\n      if (data.type == \"rematch\") {\n        setGameStatus(\"waiting\");\n        setTimeout(() => {\n          setWordle(data.wordle);\n          setPlayers(data.players);\n          setGameID(data.gameID);\n          setGameEnd(false);\n          setOpponentData([]);\n          setReload(reload + 1);\n          setGameStatus(\"connected\");\n        }, 1000);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    console.log(\"Reloaded\");\n  }, [gameStatus]);\n\n  const renderSwitch = gameStatus => {\n    switch (gameStatus) {\n      case \"waiting\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Waiting for other player to connect...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this);\n\n      case \"connected\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hundred\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            opponentData: opponentData,\n            clientID: clientID,\n            reload: reload,\n            gameID: gameID,\n            client: client,\n            wordle: wordle,\n            players: players,\n            user: currentName,\n            gameEnd: gameEnd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this);\n\n      case \"none\":\n        return /*#__PURE__*/_jsxDEV(JoinRoom, {\n          error: error,\n          client: client\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hundred\",\n    children: renderSwitch(gameStatus)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Wrapper, \"gp4KLT+83LZ6Z0PCGRSBWP1GT4k=\");\n\n_c = Wrapper;\nexport default Wrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrapper\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Wrapper.js"],"names":["React","useEffect","useState","useContext","Board","GameContext","w3cwebsocket","W3CWebSocket","JoinRoom","Opponent","Wrapper","client","clientID","gameID","gameStatus","setGameStatus","setClientID","setCreateJoin","setGameID","currentName","wordle","setWordle","error","setError","players","setPlayers","gameEnd","setGameEnd","reload","setReload","opponentData","setOpponentData","onopen","console","log","onmessage","message","data","JSON","parse","type","status","winner","rows","setTimeout","renderSwitch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useEffect, useState, useContext} from 'react';\r\nimport Board from \"./Board\";\r\nimport {GameContext} from '../context/GameContext.js'\r\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\r\nimport JoinRoom from \"./JoinRoom\";\r\nimport Opponent from \"./Opponent\";\r\nfunction Wrapper({client}) {\r\n    const {clientID, gameID, gameStatus, setGameStatus, setClientID, setCreateJoin, setGameID, currentName} = useContext(GameContext);\r\n    const [wordle, setWordle] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [players, setPlayers] = useState(null)\r\n    const [gameEnd, setGameEnd] = useState(false)\r\n    const [reload, setReload] = useState(0);\r\n    const [opponentData, setOpponentData] = useState([])\r\n\r\n    useEffect(() => {\r\n        client.onopen = () => {\r\n          console.log(\"client connected to server\");\r\n        }\r\n        client.onmessage = (message) => {\r\n            const data = JSON.parse(message.data);\r\n            console.log(data);\r\n            if (data.type == \"initial\") {\r\n              setClientID(data.clientID)\r\n              console.log(data.clientID);\r\n            }\r\n      \r\n            if (data.type == \"create\") {\r\n              setGameID(data.gameID);\r\n              setCreateJoin(\"create\");\r\n            }\r\n\r\n            if (data.type == \"join-error\") {\r\n                if (data.message == \"full\") {\r\n                    setError('Room is full');\r\n                } else {\r\n                    setError ('Invite code is invalid');\r\n                }\r\n            }\r\n            if (data.type == \"join-success\") {\r\n                setGameID(data.gameID);\r\n                setError(null);\r\n\r\n            }\r\n            if (data.type == \"start\") {\r\n                setWordle(data.wordle)\r\n                setGameID(data.gameID)\r\n                setPlayers(data.players)\r\n                setGameStatus(\"connected\")\r\n                \r\n                \r\n            }\r\n            if (data.type == \"winner\") {\r\n                \r\n                setGameEnd({status: true, winner: data.winner});\r\n                setReload(reload + 1);\r\n            }\r\n            if (data.type == \"update\") {\r\n                setOpponentData(data.rows);\r\n            }\r\n            if (data.type == \"rematch\") {\r\n                setGameStatus(\"waiting\")\r\n                setTimeout(() => {\r\n                    setWordle(data.wordle)\r\n                    setPlayers(data.players)\r\n                    setGameID(data.gameID)\r\n                    setGameEnd(false);\r\n                    setOpponentData([]);\r\n                    setReload(reload + 1);\r\n                    setGameStatus(\"connected\");\r\n\r\n                }, 1000)\r\n            }\r\n          }\r\n        \r\n      }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"Reloaded\")\r\n    }, [gameStatus])\r\n\r\n    const renderSwitch = (gameStatus) => {\r\n        switch(gameStatus) {\r\n            case(\"waiting\"):\r\n                return (<div>Waiting for other player to connect...</div>);\r\n            case(\"connected\"):\r\n                return (<div className=\"hundred\"><Board opponentData= {opponentData} clientID={clientID} reload={reload} gameID={gameID} client={client} wordle={wordle} players={players} user={currentName} gameEnd={gameEnd}></Board></div>);\r\n            case(\"none\"):\r\n                return (<JoinRoom error={error} client={client}></JoinRoom>)\r\n        }\r\n    }\r\n\r\n\r\n  return <div className=\"hundred\">{renderSwitch(gameStatus)}</div>\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}