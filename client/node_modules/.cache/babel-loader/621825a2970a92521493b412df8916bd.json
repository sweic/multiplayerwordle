{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ytdan\\\\OneDrive\\\\Desktop\\\\Computer Science\\\\MERN\\\\wordleio\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HistoryRow from \"./HistoryRow\";\nimport { useState, useEffect, useRef } from 'react';\nimport CurrentRow from \"./CurrentRow\";\nimport BlankRows from \"./BlankRows\";\nimport { VALIDGUESSES, WORDS } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    wordle,\n    client,\n    opponent\n  } = _ref;\n  const [history, setHistory] = useState([]);\n  const [currentRow, setCurrentRow] = useState([]);\n  const [reload, setReload] = useState(0);\n  const [error, setError] = useState(false);\n  const [winner, setWinner] = useState(false);\n  const testRef = useRef(null);\n  var gameEnd = false;\n  var prevRow = [];\n  var prevHistory = [];\n  prevHistory = [];\n\n  function checkKey(e) {\n    if (prevHistory.length == 6 || gameEnd) return;\n\n    if (prevRow.length == 5) {\n      if (e.keyCode == 13) {\n        var word = prevRow;\n        console.log(word);\n\n        if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\n          setError(true);\n          setTimeout(() => {\n            setError(false);\n          }, 2000);\n          return;\n        }\n\n        var target = wordle;\n        var final = [];\n\n        for (var i in word) {\n          var status = \"gray\";\n\n          if (word[i] == target[i]) {\n            status = \"green\";\n            target = target.replace(word[i], \" \");\n          } else if (target.includes(word[i])) {\n            status = \"yellow\";\n            target = target.replace(word[i], \" \");\n          }\n\n          final.push({\n            result: word[i],\n            status: status\n          });\n        }\n\n        setHistory([...prevHistory, final]);\n        prevHistory.push(final);\n        setCurrentRow([]);\n        prevRow = [];\n\n        if (final.every(value => value.status == \"green\")) {\n          client.send(JSON.stringify({\n            message: \"your mum won bro\"\n          }));\n          setWinner(true);\n          window.removeEventListener('keyup', checkKey);\n          gameEnd = true;\n          prevHistory = [];\n          prevRow = [];\n        }\n      } else if (e.keyCode == 8) {\n        const tmp = prevRow.slice(0, prevRow.length - 1);\n        setCurrentRow(tmp);\n        prevRow = tmp;\n      }\n    } else if (e.keyCode == 8) {\n      const tmp = prevRow.slice(0, prevRow.length - 1);\n      setCurrentRow(tmp);\n      prevRow = tmp;\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\n      setCurrentRow([...prevRow, e.key]);\n      prevRow.push(e.key);\n    }\n  }\n\n  useEffect(() => {\n    const idx = Math.floor(Math.random() * 2314 + 1);\n    window.addEventListener('keyup', checkKey);\n    testRef.current.focus();\n    return () => {\n      window.removeEventListener('keyup', checkKey);\n    };\n  }, []);\n  useEffect(() => {\n    setHistory([]);\n    setCurrentRow([]);\n    setTimeout(() => {\n      window.addEventListener('keyup', checkKey);\n      testRef.current.focus();\n    }, 100);\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toasty\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: error ? \"toast-container error\" : \"toast-container\",\n        children: \"Not in word list!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: winner ? \"toast-container error\" : \"toast-container\",\n        children: \"You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), opponent, history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryRow, {\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 32\n    }, this), history.length < 6 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"currentrow-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(CurrentRow, {\n        currentRow: currentRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 70\n      }, this), /*#__PURE__*/_jsxDEV(BlankRows, {\n        blankRows: 6 - history.length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"fallback-input\",\n      ref: testRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Board, \"0+QgEc2ZDZDydRj5E0Gm8RbwPuo=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/ytdan/OneDrive/Desktop/Computer Science/MERN/wordleio/client/src/components/Board.js"],"names":["React","HistoryRow","useState","useEffect","useRef","CurrentRow","BlankRows","VALIDGUESSES","WORDS","Board","wordle","client","opponent","history","setHistory","currentRow","setCurrentRow","reload","setReload","error","setError","winner","setWinner","testRef","gameEnd","prevRow","prevHistory","checkKey","e","length","keyCode","word","console","log","includes","join","setTimeout","target","final","i","status","replace","push","result","every","value","send","JSON","stringify","message","window","removeEventListener","tmp","slice","key","idx","Math","floor","random","addEventListener","current","focus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport HistoryRow from \"./HistoryRow\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport CurrentRow from \"./CurrentRow\";\r\nimport BlankRows from \"./BlankRows\";\r\nimport {VALIDGUESSES, WORDS} from '../constants.js'\r\nfunction Board({wordle, client, opponent}) {\r\n   const [history, setHistory] = useState([])\r\n   const [currentRow, setCurrentRow] = useState([]);\r\n   const [reload, setReload] = useState(0)\r\n   const [error, setError] = useState(false)\r\n   const [winner, setWinner] = useState(false);\r\n  \r\n   const testRef = useRef(null)\r\n\r\n   var gameEnd = false\r\n   var prevRow = []\r\n   var prevHistory = []\r\n   prevHistory = [];\r\n\r\n   function checkKey(e) {\r\n    if (prevHistory.length == 6 || gameEnd ) return;\r\n    if (prevRow.length == 5) {\r\n        if (e.keyCode == 13) {\r\n            \r\n            var word = prevRow\r\n\r\n            console.log(word);\r\n            if (!VALIDGUESSES.includes(word.join('')) && !WORDS.includes(word.join(''))) {\r\n                setError(true);\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 2000)\r\n                return \r\n            }\r\n       var target = wordle;\r\n       var final = []\r\n       for (var i in word) {\r\n           var status = \"gray\"\r\n           if (word[i] == target[i]) {\r\n               status = \"green\"\r\n               target = target.replace(word[i], \" \")\r\n           } else if (target.includes(word[i])) {\r\n               status = \"yellow\"\r\n               target = target.replace(word[i], \" \")\r\n           } \r\n           final.push({result: word[i], status: status});\r\n          \r\n       }\r\n       setHistory([...prevHistory, final])\r\n       prevHistory.push(final)\r\n       setCurrentRow([])\r\n       prevRow = []\r\n       if (final.every((value) => value.status == \"green\")) {\r\n        client.send(JSON.stringify({message: \"your mum won bro\"}))\r\n        setWinner(true);\r\n        window.removeEventListener('keyup', checkKey)\r\n        gameEnd = true;\r\n        prevHistory = [];\r\n        prevRow = [];\r\n       \r\n     }\r\n        } \r\n        else if (e.keyCode == 8) {\r\n            const tmp = prevRow.slice(0, prevRow.length - 1)\r\n            setCurrentRow(tmp)\r\n            prevRow = tmp;\r\n\r\n        }\r\n    } else if (e.keyCode == 8) {\r\n        const tmp = prevRow.slice(0, prevRow.length - 1)\r\n        setCurrentRow(tmp)\r\n        prevRow = tmp;\r\n     \r\n            \r\n    } else if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n        setCurrentRow([...prevRow, e.key])\r\n        prevRow.push(e.key)\r\n       \r\n    }\r\n}\r\n    useEffect(() => {\r\n        const idx = Math.floor((Math.random() * 2314) + 1);\r\n        window.addEventListener('keyup', checkKey);\r\n        testRef.current.focus()\r\n        return () => {\r\n            window.removeEventListener('keyup', checkKey);\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setHistory([])\r\n        setCurrentRow([])\r\n        setTimeout(() => {\r\n            window.addEventListener('keyup', checkKey);\r\n            testRef.current.focus()\r\n        }, 100)\r\n    }, [reload])\r\n\r\n\r\n  return (<div className=\"board-container\">\r\n      <div className=\"toasty\">\r\n      <div className={error ? \"toast-container error\" : \"toast-container\"}>Not in word list!</div>\r\n      <div className={winner ? \"toast-container error\" : \"toast-container\"}>You won!</div>\r\n      </div>\r\n      {opponent}\r\n   \r\n      \r\n        {history.length > 0 && <HistoryRow history={history}></HistoryRow>}\r\n       {history.length < 6 && <div className=\"currentrow-container\"> <CurrentRow currentRow={currentRow}></CurrentRow>\r\n        <BlankRows blankRows={6 - history.length - 1}></BlankRows></div>}\r\n \r\n     \r\n      <input className=\"fallback-input\" ref={testRef}></input>\r\n\r\n  </div>)\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}